Para começar a estudar um framework:
Estudar:
        - DOM
        - ES6 do JS (arrow function, class, extends, const, metodo dentro de uma class, promisses acincaration)
        - Ajax

Pesquisar:
        - ux researcher

	- Interface Humano - Computador é o UX das antigas.

        - confiruar o eslint

        - loading na tag img?

        

IDEs = Integrated Development Environment 

        HTML SEMÂNTICO = FACILIDADE DE MANUTENÇÃO, COMPREENSÃO DO DOCUMENTO, FACILITA ACESSIBIDADE (Progressive Enhancement*), AJUDA O SEO (técnica importante, Search Engine Optimization) => * Progressive enhancement é uma estratégia de desenvolvimento de páginas web com ênfase na acessibilidade, utilização de tags HTML semânticas, estilos CSS externos e JavaScript não obstrusivo. Nessa estratégia utilizam-se as tecnologias web em forma de camadas, permitindo que todos acessem o conteúdo básico de uma página independente de navegador e link de internet, porém, quanto maior o suporte às tecnologias visuais ou recursos mais recentes de navegação, mais rica é a experiência do usuário.


UX/UI
-----

	UX Cursos para as pessoas que quer aprender: - Idealização - Analise de concorrencia - Pesquisa (UX research) - Sitemap e arquitetura da 		informação - Wireframes - Testes de usabilidade UI - Prototipação - Guia de Estilo - Motion design
	
	UX - Idealização - Analise de concorrencia - Pesquisa (UX research) - Sitemap e arquitetura da informação - Wireframes - Testes de 		usabilidade
	
	UI - Prototipação - Guia de Estilo - Motion design
	
Wireframes = esboço da visão da página (ele vai guiar o resto do processo do design). O que resulta desse trabalho que o designer desenvolve (Esse trabalho geralmente é desenvolvido por um designer ou alguém que seja formado em comunicação) em cada wireframe é chamado de LAYOUT. 

Então basicamente o pessoal de UX já define as páginas, o conteúdo de cada uma delas e produz alguns Wireframes. Depois a equipe de design adiciona o visual desejado pela cliente como resultado final do projeto. E é onde entramos, onde transformamos esse layout em html.


===>>> boa parte da segurança fica terceirizada, isto é : tirando boas praticas de segurança os servidores que hospedam seu conteudo é que vao garantir a maior parte da sua seguranca. desde hostigator ate AWS.

===>>> O DevOps é como se fosse um arquiteto, ele sabe exatamente onde colocar as colunas para o "sistema" ser levantado e escalável.


<html>
        <head>
                são as infos importante só para o nevegador
        </head> 
        
        //(head e boddy são tags irmãs pois tem o mesmo nível hierarquico, sendo filhas da tag html)
        
        <body>
                Todo o conteúdo da página
        </body>

</html>




logo mirror fashon (imagem)=> E-commerce
        => É uma loja focada em roupas femininas para o público de classe média alta. (Também tem roupas para o público masculino, porém o foco é do feminino = importante para o UX)

Título A Mirror Fashion

Paragráfo a Mirror Fashion é a maior empresa ...

Paragráfo nosso centro de distribuição ...

Foto do centro de distribuição / legenda

Paragráfo Compre suas roupas e acessórios...

Subtítulo = História

        => A hierarquia de título, a tipografia (tamanho da fonte, subtítulo, título, etc) é uma herança que vem do jornal, do Impresso.

E PARA PODERMOS NOS COMUNICAR COM O NAVEGADOR E PASSAR TODAS ESSAS INFORMÇÕES PARA O BROWSER, NÓS USAMOS AS "tags". AS TAGS SERVEM PARA DAR SÊMANTICA DENTRO DO HTML (TRANSMITIR A INFO CORRETA PARA O CONTEÚDO CORRETO). SERVE PARA VALORIZAR O CONTEÚDO PARA DAR ACESSIBILIDADE AO CONTEÚDO E SERVE TAMBÉM PARA O SEO* [Search Engine Optimization (otimização para mecanismos de busca)]. (DAR UMA BOA REFERENCIA PARA BUSCA NO GOOGLE - OTIMIZAR O SITE PARA A BUSCA) => pessoas/SEO

Usando as tags:
(dão significado ao texto)

    <nomeDaTag> = Tag de abertura
    </nomeDaTag> = Tag de fechamento
    <img/> = Quando não tem tag de fechamento? Quando ela não tem começo meio e fim. 
    com o arquivo em .html, as tags ficam em outra cor, o que chamamos de starlight.

        <h1>A Mirror Fashion</h1>

        <p>a Mirror Fashion é a maior empresa ... </p> .p-paragrafe

        <p> nosso centro de distribuição ... </p>

        Foto do centro de distribuição / legenda

        <p> Compre suas roupas e acessórios... </p>

        <h2> História </h2>

                
                
                *** Hierarquia de Títulos ***

                <h1> <h2> <h3> <h4> <h5> <h6> .h-heading 1 => foi criado o html para criar teses cientificas dentro da Web. * Não use até o h6 - Varie do h1 até no máximo h3. Você pode acabar atrapalhando a semântica do pág.


===>>> Quando colocamos a tag <!DOCTYPE html> estamos informando ao navegador que o tipo do nosso arquivo é um arquivo do tipo html na sua ultima versão de uso. (E por isso que ela tem que ficar na primiera linha pois é assim que o navegador entenderá de cara qual é a versão que estamos usando.) (indica para o navegador qual versão ele deve usar para rendereizar a página.)

===>>> A ordem do HTML é a seguinte:

        html1 ; html2; html3; html4; xhtml; html5.

===>>> Na tag <html> colocamos o atributo lang (linguagem) que assim, nessa tag global, indicamos em que idioma o site está sendo escrito. (com o valor "pt-BR", pois está em português.)

===>>> head (cabeça) = tudo o que for de conf da página.

===>>> Porém, precisamos dar um nome para a página para que ele fique visível ao usuário, para que ele saiba em qual página está navegando. Colocamos assim a tag <title> (Ficará na aba do documento ou será exibido na barra de título) [tag semantica]

===>>> Alguns navegadores não conseguem entender as acentuções (ã, ç, à, ü, ô, etc). Então, a partir de uma tabela que já existe, nos add as configs dela na nossa página para que o texto fique correto. Colocamos a tag <meta charset="UTF-8"/> .meta-metadados / #charset = char: caracteres e set: definir (característica, parâmetro ou config) (charset ou encoding = conf da codificação de caracteres) / "UTF-8"-valor (definimos qual é a tabela de caracteres) (UTF-8 = Unicode)
*** TAG> ATRIBUTO> VALOR *** (Não tem tag de fechamento porque não tem conteúdo.)

===>>> colocamos uma tag <link> para usarmos o css fora do html e ficaria assim: <link rel="stylesheet" href="../css/style.css"> rel - relation (relacionado ao que: ao valor "stylesheet" que é o estilo do css) e href - é o local do endereço de onde se encontra o arquivo css que eu estou criando.

===>>> body (corpo) = Tudo o que for conteúdo colocamos dentro dessa tag [tag semantica]

===>>> Tags de ênfase:
        <strong>Deixa o texto em negrito (de forma semantica)</strong>
        <em>Deixa o texto em itálico (de forma semantica) - emphasis accentuated / (ênfase acentuada)</em>
        <small>Deixa o texto menor que o padrão (de forma semantica)</small>

===>>> tag que add imagens: <img src="../img/logo.png"/" alt="Logo da marca Mirror Fashion"/> .img-imagem / #src-source (caminho)/ "entre aspas, o local onde está a imagem, o endereço dela." (../ volta uma pasta) / Para deixar a imagem acessível para deficientes visuais momentâneo, parcial ou total, colocamos o atributo "alt" e nele fazemos uma descrição da imagem. (alt quer dizer contéudo alternativo - alternative)

===>>> Colocamos a tag figcaption para colocar a legenda da imagem (muitas pessoas colocam a tag <p> de forma genérica mas para o html5 foi criada essa rag própria para as legendas)

??? E se nós tivessemos mais de uma imagem? Como eu sei que aquela legenda é daquela figura em específico?

envolvemos as tags <img> e <figcaption> na tag <figure> assim eu identifico (semânticamente) que aquela legenda representa sobre aquela exata imagem.

===>>> Listas:

        ordered list: lista ordenada <ol>
                (existe hierarquia de impostancia)
                <li> list item - item da lista
        unordered list: lista não-ordenada <ul>
                (não existe hierarquia de impostancia)
                <li> list item - item da lista
    (a <li> tem por padrão o valor block para a proprieadade display. Se quisermos que a lista fique na horizontal, devemos colocá-lo com o valor inline)


(===>>> Tag div não tem semantica)

===>> tags <div> (divisão) [comportamento padrão = display:block] e <span> (marcação de atributos) [comportamento padrão = display: inline] são como coringas quando não sabemos com o que abrir o "início do algo" que queremos fazer. Não tem nenhum significado especial, podem servir para agrupar conteúdos para que eu possa alterar o seu comportamento nesse grupo (por padrão eles não tem estilo css nenhum.) [diferente das tags header e footer que tem valor semantico.] Então a div é apenas uma "divisão". [tag não tem semantica]

===>>> Lorem cria um conteúdo gigante, caso você precise de um texto de exemplo

===>>> para colocar link, adicionamos a tag <a href=""> a - ancor (âncora = antigamente iamos NAVEGAR na internet e fazia-se isso por meio dos link, então quando parávamos é quando chegavamos no nosso objetivo - "jogando a âncora") e href - referencia (sem o href não funcionará) / podemos ainda dar mais um atributo para o <a> que é o target com o valor "_blank" (isso fará com que outra página seja aberta em uma em branco ou numa nova aba para que seu site não seja "substituido.") 

        <a href="#primeiro">Primeiro</a> <!-- bookmark - referenciar dentro da página (#id) -->
        <a href="#segundo">Segundo</a> <!-- para outra parte do site na mesma página -->
        <a href="#terceiro">Terceiro</a>
        <a href="sobre.html">Sobre</a> <!-- para outra página do site -->
        <a href="https://twitter.com/marcobrunodev" target="_blank">Twitter MB</a> <!-- link externo -->
        

        <h2 id="primeiro">Primeiro</h2>
                <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos ...</p>

===>>> id = identification (identificação) - não podemos usar nenhum id igual ao outro. Serve para identificar um elemento específico: <h2>. Mas qual h2? então adicionamos o atributo id a tag e assim saberemos que aquele h2 específico terá uma diferença em relação aos outros. <h2 id="primeiro"> (tipo org da página)
(não podemos repetir na página)


===>>> Quando você usa um css escalável, reutilizavel, bonito, etc não será feito com id e sim com class, ele te dará essa versatilidade.

        ===>>> Então quando usar id e quando usar class?? Id sempre será único por página. A classe facilita o reuso de código e flexibilidade. Um elemento pode ter mais de uma classe ao mesmo tempo, por exemplo: 

                <nav class="menu-opcoes menu-cabecalho">
                ...
                </nav>

                no CSS
                ------
                .menu-opcoes {
                        // código
                        // regras serão aplicadas ao nav
                }
                
                .menu-cabecalho{
                        // código
                        // Essas regras também serão aplicadas ao nav
                }

                O que é recomendado é sempre tentar usar o máximo de seletor de class possível e menos de seletor de id ou de tag. No CSS a ordem de prioridade são os seletores que estão abaixo. 

===>>> header (cabeçalho) [tag semantica]

===>>> nav (navegation) = navegação (geralmente é onde fica aquele menu, menu hamburguer, etc) que fica dentro da tag header. [tag semantica] (Podemos ainda ter um menu nav secundário, onde daremos outro menu de navegação para o site, mas vai depender do que o site pede. Mas sim, é uma boa prática de prog ter um menu nav fora do header quando FOR NECESSÁRIO)        

===>>> footer (rodapé) [tag semantica]



                        >>> (A baixo veremos a construção do nosso site) <<<    (HTML)
==========================================================================================================


                INDEX.html
                ----------

        
                
                SOBRE.html
                ----------

<!DOCTYPE html>
<html lang="pt-BR">
    
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>A Mirror Fashion</title>
        <link rel="stylesheet" href="css/sobre.css">
    </head>

    <body>

        <img src="../img/logo.png" alt="Logo da marca Mirror Fashion">
        
        <h1>A Mirror Fashion</h1>
        
        <p>
            A <strong>Mirror Fashion</strong> é a maior empresa comércio eletrônico no segmento de moda em todo o mundo. 
            Fundada em 1932, possui filiais em 124 países, sendo líder de mercado com mais de 90% de 
            participação em 118 deles.
        </p>
        
        <p> 
            Nosso centro de distribuição fica em <a href="https://www.google.com.br/maps/place/Jacarezinho,+PR,+86400-000/@-23.1588226,-49.9858485,5590m/data=!3m1!1e3!4m5!3m4!1s0x94c026544d26f253:0xc66dac11dad56f73!8m2!3d-23.157939!4d-49.9777202" target="_blank">Jacarezinho, no Paraná</a>. De lá, saem 48 aviões que 
            distribuem nossos produtos às casas do mundo todo. Nosso centro de distribuição: 
        </p>
        
        <figure id="centro-de-distribuicao">
            <img src="../img/centro-distribuicao.png" alt="Foto do centro de distribuição da Mirror Fashion"/>
            <figcaption>Centro de distribuição da Mirror Fashion</figcaption>
        </figure>

        <p> 
            Compre suas roupas e acessórios na <strong>Mirror Fashion</strong>. Acesse <a href="index.html">nossa loja</a> ou entre em contato 
            se tiver dúvidas. Conheça também nossa <a href="#historia">história</a> e nossos <a href="#diferenciais">diferenciais</a>. 
        </p>
        
        <h2 id="historia"> História </h2>

        <figure id="familia-pelho">
            <img src="../img/familia-pelho.jpg" alt="Fot da Família pelho">
            <figcaption>Família Pelho</figcaption>
        </figure>

        <p>
            A fundação em 1932 ocorreu no momento da descoberta econônica do interior do Paraná. A 
            família Pelho, tradicional da região, investiu todas as suas economias nessa nova iniciativa, 
            revolucionária para a época. O fundador <em>Eduardo Simões Pelho</em>, dotado de particular visão 
            administrativa, guiou os negócios da empresa durante mais de 50 anos, muitos deles ao lado 
            de seu filho <em>E. S. Pelho Filho</em>, atual CEO. O nome da empresa é inspirado no nome da família.
        </p>

        <p>
            O crescimento da empresa foi praticamente instantâneo. Nos primeiros 5 anos, já atendia 18 países. 
            Bateu a marca de 100 países em apenas 15 anos de existência. Até hoje, já atendeu 740 milhões 
            de usuários diferentes, em bilhões de diferentes pedidos.
        </p>

        <p>
            O crescimento em número de funcionários é também assombroso. Hoje, é a maior empregadora do 
            Brasil, mas mesmo após apenas 5 anos de sua existência, já possuía 30 mil funcionários. Fora do 
            Brasil, há 240 mil funcionários, além dos 890 mil brasileiros nas instalações de Jacarezinho e 
            nos escritórios em todo país.
        </p>

        <p>
            Dada a importância econômica da empresa para o Brasil, a família Pelho já recebeu diversos prêmios, 
            homenagens e condecorações. Todos os presidentes do Brasil já visitaram as instalações da <strong>Mirror Fashion </strong>, além de presidentes da União Européia, Ásia e o secretário-geral da ONU.
        </p>

        <h2 id="diferenciais">Diferenciais</h2>

        <ul>
            <li>Menor preço do varejo, garantido</li>
            <li>Se você achar uma loja mais barata, leva o produto de graça</li>
            <li>Pague em reais, dólares, euros ou bitcoins</li>
            <li>Todas as compras com frete grátis para o mundo todo</li>
            <li>Maior comércio eletrônico de moda do mundo</li>
            <li>Atendimento via telefone, email, chat, twitter, facebook, carta, fax e telegrama</li>
            <li>Presente em 124 países</li>
            <li>Mais de um milhão de funcionários em todo o mundo</li>
        </ul>

        <div id="compra"><strong>Compre já em nossa loja!</strong></div>

        <div id="rodape">
            <img src="img/logo.png" alt="Logo da Mirror Fashion"/> 
            &copy; <em>Copyright Mirror Fashion</em>
        </div>

    </body>
</html>




==========================================================================================================


                        *** CSS ***


- resetar css [reset css] (o comportamento do css não funciona de forma padronizada para todos os navegadores, por isso, o que fazemos é o que chamamos de reset no css, ou seja, configuramos o css de jeito que ele irá fazer com que nosso site funcione igualmente independente do navegador que nos site será navegado.)

        Podemos usar arquivos prontos que já existe na internet, por exemplo esse abaixo que foi tirado do site https://meyerweb.com/eric/tools/css/reset/

                /* http://meyerweb.com/eric/tools/css/reset/ 
                v2.0 | 20110126
                License: none (public domain)
                */

                html, body, div, span, applet, object, iframe,
                h1, h2, h3, h4, h5, h6, p, blockquote, pre,
                a, abbr, acronym, address, big, cite, code,
                del, dfn, em, img, ins, kbd, q, s, samp,
                small, strike, strong, sub, sup, tt, var,
                b, u, i, center,
                dl, dt, dd, ol, ul, li,
                fieldset, form, label, legend,
                table, caption, tbody, tfoot, thead, tr, th, td,
                article, aside, canvas, details, embed, 
                figure, figcaption, footer, header, hgroup, 
                menu, nav, output, ruby, section, summary,
                time, mark, audio, video {
                        margin: 0;
                        padding: 0;
                        border: 0;
                        font-size: 100%;
                        font: inherit;
                        vertical-align: baseline;
                }
                /* HTML5 display-role reset for older browsers */
                article, aside, details, figcaption, figure, 
                footer, header, hgroup, menu, nav, section {
                        display: block;
                }
                body {
                        line-height: 1;
                }
                ol, ul {
                        list-style: none;
                }
                blockquote, q {
                        quotes: none;
                }
                blockquote:before, blockquote:after,
                q:before, q:after {
                        content: '';
                        content: none;
                }
                table {
                        border-collapse: collapse;
                        border-spacing: 0;
                }

        { Ele funcionará muito bem para site pequenos, porém, para sites maiores, mais complexos ou com mais recursos, podemos usar o "Normalize". }

        === >>> Usar o reset css é basicamente obrigatório.


                CSS => (seletor > propriedade > valor)
                -------------------------------------- 

        Agora, vamos estilizar a página:

        A tag <style> conseguimos dar propriedades a ela, assim visualmente, podemos modificar a cor de fundo da página, cor da letra, estilo da letra, se o texto ficará centralizado ou não, etc.

        É uma boa prática de programação quando separamos os arquivos, pois para a manutenção por exemplo, separamos os arquivos e assim facará muito mais fácil de saber onde eu devo alterar ou fazer a manutenção x, do que colocar nas tags html. (É como se deixassemos quando um cumprir com o seu papel. Caso colocassemos o css no html é como se "sobrecarregassemos" o html desnecessáriemante.) deixamos cada qual fazer o seu trabalho: html cuidando do conteúdo e o css cuidando da estilização. 

        ===>>> Para colocarmos uma linha abaixo do h2 nós usamos o border-bottom, porque a tag hr é semântica e é utilizada para separar estrofes e aqui queremos fazer algo visual, queremos colocar uma linha no background do h2

        ===>>> Como funciona o "box model"? (modelo de caixa)

                (de dentropra fora)

                Da tag <h2>
                > conteúdo (História)
                > padding (aumenta o tamanho da imagem)
                > **border (aumenta o tamanho da imagem)**
                > margin (aumenta o tamanho da imagem)

                HTML
                <h2>História</h2>

                CSS

                h2{
                        height:200px;
                        width:400px;
                        border: 1px solid white;
                        padding: 50px; (respiro interno)
                        margin: 60px; (respiro externo)
                }

                                          width 400px
                        -------------------------------------------------
                        |                 margin 60px                   |
                        |solid **_______________________________** 1px  |
                        |       |         padding 50px          |       |
                        |       |       -----------------       |       |
                 height |       |       |   conteúdo    |       |       |
                  200px |       |       -----------------       |       |
                        |       |_______________________________|       |
                        |                                               |
                        -------------------------------------------------
                                          

                                tamanho total do item: 1022px x 622px
                                

                        (Somamos: width or height + padding + border + margin)



* Podemos usar o body para deixar a página padronizada, por exemplo, cor de fundo, estilo de letra, etc... 

** sobre cores:

        1.Por nome: Red,
        2.Por hexadecimal: #ffffff => Baseado em luz,
        3.Por rgb (ou rgba):rgb(48, 47, 47) / rgba(48, 47, 47, 0.1); => 

                2. (RRGGBB) = Red, Green, Blue 0 - F.
                3. (rgb - red, green, blue 0 - 255)
                (rgba - red, green, blue, alpha => r, g, b = 0 - 255 e alpha 0 - 1) ALPHA dá uma transparencia a cor.

                [Já para colocar transparencia na imagem, add no css uma propriedade a tag <img> que a opacity: 0.5 (exemplo) Que é exatamente igual ao canal alpha do rgba] Exemplo:

                        HTML:
                        <img src="logo.png">

                        CSS:
                        img{
                                opacity: 0.5;
                                boder: 1px solid blue;
                        }

                        A opacidade será aplicada a toda a tag img e na borda também pois ficará na tag toda.


===>>> Temos que lembrar que tudo tem um padrão, no início. Exemplo: o texto todo sempre começará da esquerda apra a direita e de cima para baixo. Então, tudo, eu disse TUDO, sempre tem um coportamento padão para que possamos formata-los conforme nossa necessidade.

        -background-color: cor do fundo;

        -background-image: url() coloca uma imagem no fundo e seu valor será sua url (seu end.);

                Quando usar img no html e no css??? Temos que verificar primeiramente qual a semantica da imagem. O que queremos dizer com isso: O que a imagem representa pra nós? Ela apresenta contéudo ou é apenas uma reprensentação visual? Um exemplo seria o logo de uma empresa. Esse seria o primeiro elemento que estamos vendo, seria uma assosciação com a marca entre várias outras infomações que podemos colher 
        
        -background-repeat: no-repeat; por padão o navegador repete a imagem e assim configuramos ela para não tenha repetição e sim uma imagem só.

        -background-position: top right; /* x = horizontal, y = vertical */

                
                                           | y (+)
                                           |
                                           |
                                           |
                                           |
                                           |
               (-) ________________________|_____________________ x (+)
                                          0|
                                           |
                                           |
                                           |
                                           |
                                           |
                                           |
                                           | (-)

                (Este é o plano cartesiano que ja conhecemos)

                Porém, o eixo do computador funciona de forma diferente:

                _________________________________________________
                |navegador                                      |
                |_______________________________________________|
                |                                               |
                |  0____________________________________ x (+)  |
                |  | y (-)                                      |
                |  |                                            |        
                |  |                                            |
                |  |                                            |
                |  |                                            |
                |  |                                            |
                |  |                                            | 
                |  | y (+)                                      |
                |_______________________________________________|

                O eixo 0 fica no topo, a esquerda. O x é o eixo horizontal também porém, o eixo y trabalha a vertical de forma diferente:
                        - se colocarmos negativo, o elemento sobe (ficando mais próximo ao topo)
                        - se colocarmos positivo, o elemento desce (ficando mais próximo do rodapé)

                        Ainda podemos utilizar palavras para movimentar nos nossos eixos (top, right, bottom, left e center sendo sempre dois valores: um pra x [horizontal] e outro pra y [vertical])

        -color: cor da letra;

        -border: 1px solid #000000 [tamanho, tipo e cor = em px, boda solid (sólida - contínua) e a cor preta (borda de qualquer elemento); EX: dashed, dotted, double, groove, etc.
        
        - E ainda é possível dizer onde queremos essa linha: se left, right, top or bottom. Caso não seja especificado, quer dizer que a borda será em tudo];

        -text-align: center - alinhamento do texto (center - centralizado)* No nosso primiero caso aplicamos a tag <figure>, porém dentro dela temos além de um texto na <figcaption>, uma <img> e neste caso podemos considerar a img como texto também (como contéudo) e com isso, (a proprieadade sendo aplicada na tag pai), tudo o que estiver dentro (as tags filho) serão alteradas; EX: left, right, justify.

        -font-family: "Lucida Sans Unicode","LucidaGrande", Arial, sans-serif; (familia da fonte - Aqui, colocamos outras opções caso não haja aquela determinada fonte instalada na máquina do usuário) e por fim colocamos a sans-serif que ficaria como "qualquer fonte sem serifa";

                >serif: c/serifa = Times; (padrão de vários navegadores)
                >sans-serif: s/ serifa = Helvética;
                >monospace: com largura fixa = courier;

        -font-style: italic - estilo da fonte (itálico);

        -font-size: tamanho da fonte;

        -text-indent: (só afeta o texto, como o seu prefixo mostra) adicionamos o parágrafo daquele que dáriamos com o tab quando estamos escrevendo no word ou no papel, quando a professora nos ensina no primário que um bom espaço para o parágrafo é colocar um dedo no início da folha da esquerda pra direita, marca um pontinho e começa a escrever daquele ponto. A doferença com o text-indent é que esse espaço, o colocamos em px, cm, ou em qualquer unidade de medida que vocẽ esteja usando para desenvolver a sua página; (Tamanho da margem da primeira linha do texto.)

                Ainda:
                        -line-height: 3px; tamanho da altura de cada linha

                        -letter-spacing: 3px; tamanho do espaço entre cada letra

                        -word-spacing: 5px; tamanho do espaço entre cada palavra

        -width: largura [Quando você não define uma largura, ele (o elemento) ocupará toda a largura da página (o height ou ultilizará a altura do elemento ou se adaptará conforme o width)***];

                *** Lembrando que: nem toda a tag tem esse mesmo comportamento. isso (ocupar toda a largura da página) acontece para as tags <div>, <p>, etc. Já, por exemplo com a tag <a> (link) isso não acontecerá (irá ocupar só o espaço do link);

                *** Quando a largura vaza, causa um scroll (pode acontecer apra qualquer propriedade quando o valor que atribuimos ultrapassa ao tamanho da página atual.)

        -height: altura [quando você não a declara ela se ajustará com o width e caso você não coloque o width se adaptará ao tamanho da sua tela, caso você tenha declarado a tag <meta name="viewport" content="width=device-width, initial-scale=1.0">];

        -margin: respiro externo [auto: centralizará o elemento, pois ele atribui o mesmo valor de lado esquerdo para o lado direito (margin-left e margin-right). (Fica melhor de visualizar quando você define um valor para o width. Caso contrário, o margin se adaptará ao tamanho da sua tela.) Contudo, o margin auto funciona com 3 regras: display, width e margin. Assim ele funcionará direitinho (no nosso exemplo, usamos a div. Por padrão a div já é em display: block)]

                > margin: 10px [aplica em todas as direções]; (shorthand property - propriedade taquigráfica)
                > margin-top: 10px [aplica só no topo] (ainda podemos definir especificamente para right, bottom e left.)
                > margin: 10px 11px 12px 13px [estamo fazendo a forma resumida e a ordem é 10px - top, 11px - right, 12px - bottom e 13px - left.]
                > margin: 10px 15px [será a plicado assim: 10px top e bottom / 15px right e left]
                        (então, margin: 0 auto [ficaria 0 para top e bottom / auto para right e left])
                > margin: 10px 12px 14px [10px para top, 12px para right e left, 14px para bottom]

                                         10px
                                      -----------
                                      |         |
                                 12px |         | 12px
                                      |         |
                                      -----------  
                                          14px

                        (Essa lógica acima, quando eu coloco só um valor, ou 2 ou 4 ou 3, se aplica para padding e border também [só temos que lembrar que pra toda regra, temos excessões] mas por padrão, funciona assim.)

        -padding: respiro interno [idem margin** (Quase sempre)];

        -display: é a forma de como o conteúdo vai se comportar.
        
        -display: block (bloco. Utilizará o bloco da página toda** Isso poderá ter algumas diferenças.)

        -display: inline (em linha. O conteúdo passa a se comportar como texto*)

        -position: static (posição: estática - static é o valor default da position. será a referencia de onde ele foi criado. É o padrão da propriedade)[pode ser usado também quando queremos tirar um comportamento anterior. Ex: Caso eu tenha colocado o position: absolute no mobile e para o desktop euq não quero mais aquele comportamento. seria a mesma coisa que usar o unset.]

        -position: relative (relativo - onde ele foi criado quando ele era static. Então caso queiramos usar o left, right, top e bottom vai usar a referencia de quando ele era static. ex: left: 10px - Iremos empurrar 10px para a direita.)
        [se usarmos valores negativos ele irá mudar para o lado contrário como se tivesse um eixo]
        o valor padrão do left é auto, que assim passamos a resposabilidade para o browser. (não é zero! Zero seria parecido mais não é igual!! NÃO CONFUNDA!!)

        -position: absolute (funciona da seguinte maneira: o elemento x que recebe o position absolute sai do contexto do eixo y e passa para um outro contexto, um contexto novo a frente de tudo e todos. Todos os outros elementos que estão na tela ocupam o espaço daquele elemento x. *CASO TENHA DÚVIDA VALE LEMBRAR DA EXPLICAÇÃO DO MARCO BRUNO COM AS PEÇAS LEGO, ONDE É COMO SE VIRASSEMOS O BROWSER E CONSEGUISSEMOS VER OS ELEMENTOS DE PERFIL*)
        {O position absolute deixa seu contexto vago e cria um novo contexto na mesma camada.}

teste

                        >>> (A baixo veremos a construção do nosso site) <<<    (CSS)
===================================================================================================================

                RESET.css
                ---------

/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

        ====>>> basicamente o reset.css, serve para desconfigurar as configs padrões que já vem nos browsers. Em seguida eu aplico as minhas configs (de como eu quero que fique o layout da minha página), assim todas as esperiencias em browsers diferentes ficaram com o mesmo resultado. 




                INDEX.css
                ---------



                SOBRE.css
                ---------


body {
    width: 940px;
    color: #333333;
    font-family: "Lucida Sans Unicode","LucidaGrande", Arial, sans-serif;
    margin: 0 auto;
}

h1 {
    background-image:url(../img/sobre-background.jpg);
    color: #000000;
    padding: 10px;
    margin-bottom: 10px;
}

h2 {
    border-bottom: 1px solid #333333;
    margin: 20px 0;

}

p {
    padding: 0 45px;
    text-indent: 15px;
    margin: 10px 0;
}

figure {
    background-color:#f2eded;
    text-align: center;
    border: 1px solid #cecece;
    padding: 15px;
    margin: 30px;
}

#centro-de-distribuicao {
    width: 550px;
    margin: 0 auto;
}

#familia-pelho {
    float: right;
    margin: 0 0 10px 10px;
}

figcaption {
    font-style: italic;
    margin-top: 10px;
}

ul {
    list-style-type: circle;
}

li {
    text-indent: 50px;
}

#compra {
    background-color: #dcdcf4;
    color: #4560e2;
    font-size: xx-large;
    padding: 10px;
    text-align: center;
    margin-top: 20px;
}

#rodape {
    color: #777777;
    margin: 30px 0;
    padding: 30px 0;
}

#rodape img {
    margin-right: 30px;
    vertical-align: middle;
    width: 94px;
}


                >>>>>>>> EXPLICAÇÕES <<<<<<<<
==========================================================================================================

        Na explicação de display:
        --------------------------------------------------------------------

        >>> Block:
            ------

    O display block tem as seguintes caracateristicas:

        - USA A LINHA TODA;
        - A ALTURA É DEFINIDA PELO CONTEÚDO;
        - PODEMOS CONFIG WIDTH;
        - PODEMOS CONFIG HEIGHT;
        - NÃO DÁ PRA COLOCAR UM ELEMENTO DO LADO*; (até dá mas dá um trabalhinho)

    Algumas tags já tem por padrão o display block, por exemplo a div que estamos usando como exemplo.

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Display: Block</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div class="quadrado primeiro">Primeiro</div>
    <div class="quadrado segundo">Segundo</div>
    <div class="quadrado terceiro">Terceiro</div>
</body>
</html>


.quadrado {
    display: block; /* a div já tem por padrão o display block */
    width: 200px;
    height: 200px;
    text-align: center;
    font-size: xx-large;
    font-weight: bold;
}

.primeiro {
    background-color: #ff0000;
}

.segundo {
    background-color: #00ff00;
}

.terceiro {
    background-color: #0000ff;
}





        >>> Inline:
            -------

    O display Inline tem as seguintes caracateristicas:

        - LARGURA E ALTURA SÃO DEFINIDAS PELO CONTEÚDO;
        - OS ELEMENTOS FICAM UM DO LADO DO OUTRO;
        - NÃO CONSEGUIMOS CONFIG WIDTH; 
        - NÃO CONSEGUIMOS CONFIG HEIGHT;
        (Caso coloquemos width e height o próprio VSCode já nos apresenta o erro, pois no display inline, não conseguimos configurar a propriedade.)
        - COMPORTAMENTO DE PALAVRAS; (Tendo o comportamento de palavras, o espaço e o enter funcionam nessa propriedade da mesma forma - deixam um espaço entre as divs - e caso queiramos deixar as divs sem espaços - literalmente um do lado do outro, bem coladinho -  podemos comentar os espaços ou enters no html que funcionará.)

        - Temos outro exemplo: um aluno deu outro exemplo com o word-spacing na tag pai (class .paragrafo) com -5px e depois na class .quadrado voltando o word-spacing pra normal. [DESCOMENTAMOS NO HTML]



    > EXEMPLO 1 (MARCO BRUNO):
    --------------------------


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Display: Inline</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div>
        <div class="quadrado primeiro">Primeiro</div><!--
     --><div class="quadrado segundo">Segundo</div><!--
     --><div class="quadrado terceiro">Terceiro</div>
    </div>

    <p>
        Primeiro
        Segundo
        Terceiro
    </p>
</body>
</html>



.quadrado {
    display: inline; /* tem o comportamento de palavra */
    text-align: center;
    font-size: xx-large;
    font-weight: bold;
    padding: 5px;
}

.primeiro {
    background-color: #ff0000;
}

.segundo {
    background-color: #00ff00;
}

.terceiro {
    background-color: #0000ff;
}


    > EXEMPLO 2 (ALUNO):
    --------------------------


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Display: Inline</title>
    <link rel="stylesheet" href="index2.css">
</head>
<body>
    <!-- Um aluno na live deu outro exemplo com o word-spacing na tag pai (class .paragrafo) com -5px configurando no css. -->
    
    <div class="paragrafo">
        <div class="quadrado primeiro">Primeiro quadrado que eu fiz</div>
        <div class="quadrado segundo">Segundo</div>
        <div class="quadrado terceiro">Terceiro</div>
    </div>

    <p>
        Primeiro
        Segundo
        Terceiro
    </p>
</body>
</html>




/* um aluno deu outro exemplo com o word-spacing na tag pai (class .paragrafo) com -5px */

.paragrafo {
    word-spacing: -5px;
}

.quadrado {
    display: inline; /* tem o comportamento de palavra */
    text-align: center;
    font-size: xx-large;
    font-weight: bold;
    padding: 5px;
    word-spacing: normal;
}

.primeiro {
    background-color: #ff0000;
}

.segundo {
    background-color: #00ff00;
}

.terceiro {
    background-color: #0000ff;
}




        >>> Inline-Block:
            -------------



==========================================================================================================

        Na explicação de link:
        --------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Link</title>
</head>
<body>
    <a href="#primeiro">Primeiro</a>
    <a href="#segundo">Segundo</a>
    <a href="#terceiro">Terceiro</a>
    <a href="sobre.html">Sobre</a>
    <a href="https://twitter.com/marcobrunodev" target="_blank">Twitter MB</a>
    

        <h2 id="primeiro">Primeiro</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore... </p>
        <h2 id="segundo">Segundo</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore... </p>
        <h2 id="terceiro">Terceiro</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore... </p>



==========================================================================================================


        Na explicação de margin-auto:
        ---------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação Margin-Auto</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div>
        First => Aprendendo o Margin-Auto
    </div>

    <p>
        Aprendendo o text-indent </br></br>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Rem ad dolor nostrum pariatur quos error veniam quibusdam illo, iusto repellendus, temporibus nisi sunt ullam, id maxime corrupti doloribus sed laboriosam!
    </p>
</body>
</html>

-----------

body{
    color: #fff;
    background-color: #000;
}

div{
    font-size: 30px;
    background-color: rgb(138, 22, 22);
    display: block;
    width: 500px;
    margin: auto; /* ou margin: 0 auto; */
    text-align: center;
}

p{
    font-size: 20px;
    text-indent: 20px;
}



==========================================================================================================


        Na explicação de Position:
        ----------------------------------------------------------------------




==========================================================================================================


        Na explicação de ID e Seletores:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação seletor de ID e filho</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <header>
        <h1>Contato</h1>
        <a href="index.html">Home</a>
        <p>Entre em contato conosco:</p>
    </header>

    <h2 id="email">Email:</h2>

    <h2 id="skype">Skype:</h2>

    <h3>Exemplo do e no css</h3>
        <p>
            O "e" será reprentado pela virgula (Veja no css nas tags h2 e h3 e p)
        </p>

    <footer>
        <a href="https://twitter.com/marcobrunodev" target="_blank"><strong>Twitter</strong> Marco Bruno</a> | 
        <a href="https://twitch.com/marcobrunodev" target="_blank"><strong>Twitch</strong> Marco Bruno</a>
        <p>exemplo do seletor filho + ,</p>
    </footer>
</body>
</html>

-------------

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Home</title>
</head>

<body>
    <header>
        <h1>Home</h1>
        <a href="contato.html">Contato</a>
    </header>
</body>
</html>

--------------------

/* Seletor de tag*/

h1{
    background-color: red;
    color: white;
    width: 500px;
    margin: auto;
    text-align: center;
}

/* seletor de tag com e = , */

h2, h3{
    font-size: 20px;
    margin-left: 400px;
}

/* Seletor de ID # */

#email{
    color: green;
}

#skype{
    color: blue;
}

/* Seletor filho = com "espaço" */

footer a, footer p{
    color: #fff;
    text-decoration: none;
}

/* Tanto podemos ser mais especificos assim: "footer a strong" como com "footer strong" somente! tudo vai depender em que resultado você precisa chegar*/

footer a strong{
    color: #f00;
}

footer{
    background-color: #000;
    color: #fff;
    width: 550px;
    margin: auto;
    text-align: center;
    padding: 10px 0;
}

==========================================================================================================


        Seletores de tag, com "e"(,) e seltores filho:
        ----------------------------------------------------------------------

        (Explicação de ID e seletores)

Seletor de tag, como já diz o nome é para a tag. Veja que dessa forma aplicará para todas as tags iguais que houverem no texto.

        h1{
        background-color: red;
        color: white;
        width: 500px;
        margin: auto;
        text-align: center;
        }

Seletor de tag com e = , (Dessa forma você aplicará os mesmos parâmetros para duas ou mais tags diferentes as separando por vígula e espaço).

        h2, h3{
        font-size: 20px;
        margin-left: 400px;
        }

Seletor de ID # (Damos uma identificação específica para um determinado elemento com #ID, ou seja apenas 1 elemento terá aquela config pois podemos colocar apenas um id por página.)

        #email{
        color: green;
        }

        #skype{
        color: blue;
        }

Seletor filho = com "espaço" (Temos a opção também de aplicar um seletor para uma tag filha, assim especificamos propriedades para aquele grupo de tags. Ou seja, caso no nosso footer tenha mais de uma tag <a> e queremos aplicar aquela config a todas as tags a do nosso footer, usamos a tag filha para passar os parâmetros. Isso funciona bem para não precisarmos ficar declarando um ID para cada coisa.)

        footer a, footer p{
        color: #fff;
        text-decoration: none;
        }

Tanto podemos ser mais especificos assim: "footer a strong" como com "footer strong" somente! tudo vai depender em que resultado você precisa chegar (A hierarquia não importa por exemplo se for uma tag "neta", basta que aquele strong esteja dentro de footer [mesmo que antes esteja dentro da tag<a>])

        footer a strong{
        color: #f00;
        }

        footer{
        background-color: #000;
        color: #fff;
        width: 550px;
        margin: auto;
        text-align: center;
        padding: 10px 0;
        }


==========================================================================================================

        Na explicação de seletores, class, id e tag:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=, initial-scale=1.0">
    <title>Explicação seletores- class, id e tag</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="destaque base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="destaque">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="destaque">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
</body>
</html>


----------


.base {
    font-size: 40px;
    color: #ff0000;
}

.destaque {
    color: #00ff00;
}





-------------------------------------------

README.md

        # HTML

        - Tem a responsabilidade de guardar:
        - Conteúdo(textos e imagens);
        - Forma semântica (tags)
        - Estrutura (figure)
        (*ajudam na semântica mas não tem interferencia visual)

                = CONTEÚDO.

        # CSS

        - Tem responsabilidade de: 
        (Liguagem de estilo)
        - Visual

                = ESTILO.

        # JavaScript

        - Tem responsabilidade de:
        (Interatividade)
        - Interação, animação

                = INTERAÇÃO.
