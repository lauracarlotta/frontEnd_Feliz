Para começar a estudar um framework:
Estudar:
        - DOM
        - ES6 do JS (arrow function, class, extends, const, metodo dentro de uma class, promisses acincaration)
        - Ajax

    DEPOIS:

        -API

------------

Pesquisar:

        - RSCSS e ITCSS

        - ux researcher

	    - Interface Humano - Computador é o UX das antigas.

        - confiruar o eslint

        - loading na tag img?

        - PWA (responsivo)

        - UX RESEARCH => pesquiasa de mercado pra ver qual é o seu público alvo, ou como é o seu uśuário final, tipo se ele usa mais mobile ou browser. (podendo usar o google analytics)

        - pixel virtual

RESPONSIVO: É quando você consegue atende a todos os tamanhos de tela, desde um celular até um desktop maior OU TV - lEMBRANDO QUE JÁ TEMOS ATÉ SMARTWACHES. (Dar suporte a todos os tamanhos de tela.)  Nesse contexto ainda, podemos ver sites de grande porte que criam 2 sites diferentes para desktop e para mobile. isso porque a experiencia de usuário pode ser diferente. EX: o portal do UOL => no desktop você pode querer ver noticias de forma geral, como por exemplo esportes, política, etc; enquanto que no mobile informções sobre acidentes de transito, pausas no metrô e etc são mais imediatistas, ou seja, o que os usários do mobile poderão querer ver mais rápido ou o que terá destaque no jornal. (NO NAVEGADOR) => No mobile, já tem os apps. => No HTML não muda nada. O que tem alteração é o CSS e o JS.

    A EXPERIENCIA USUÁRIO FINAL SEMPRE SERÁ O FOCO, OU QUE É MAIS IMPORTANTE!!!
                  -------

MOBILE FIRST => Quando criamos o layout do mobile primeiro, isso significa que o layout é mais enchuto, logo, o conteúdo deve ser mais estruturado. O conteúdo será mais direcionado com o propósito dele. Já o desktop first, nós temos muito mais espaço o que fica muito mais facil de você poluir o site.

    ===>>> POR QUAL COMEÇAR PRIMEIRO? MOBILE FIRST ou DESKTOP FIRST?

        Se o conceito do seu site trabalha com apenas uma coluna, use o mobile first, isso porque por padrão o display já vem block, então é bem mais fácil de você fazer o layout por já ser coisas a menos a configurar. Já no caso de o conceito do site que você trbalhar é de mais de uma coluna (2ou++) tanto irá fazer por qual você deve começar. Ai já seria critério da sua escolha, onde talvez fosse mais facil começar pelo desktop já que é o mais trabalhoso, onde é o que ficaria mais fácil de você poluir visualmente.



IDEs = Integrated Development Environment 

        HTML SEMÂNTICO = FACILIDADE DE MANUTENÇÃO, COMPREENSÃO DO DOCUMENTO, FACILITA ACESSIBIDADE (Progressive Enhancement*), AJUDA O SEO (técnica importante, Search Engine Optimization) => * Progressive enhancement é uma estratégia de desenvolvimento de páginas web com ênfase na acessibilidade, utilização de tags HTML semânticas, estilos CSS externos e JavaScript não obstrusivo. Nessa estratégia utilizam-se as tecnologias web em forma de camadas, permitindo que todos acessem o conteúdo básico de uma página independente de navegador e link de internet, porém, quanto maior o suporte às tecnologias visuais ou recursos mais recentes de navegação, mais rica é a experiência do usuário.

------------

UX/UI
-----

	UX Cursos para as pessoas que quer aprender: - Idealização - Analise de concorrencia - Pesquisa (UX research) - Sitemap e arquitetura da 		informação - Wireframes - Testes de usabilidade UI - Prototipação - Guia de Estilo - Motion design
	
	UX - Idealização - Analise de concorrencia - Pesquisa (UX research) - Sitemap e arquitetura da informação - Wireframes - Testes de 		usabilidade
	
	UI - Prototipação - Guia de Estilo - Motion design

	
Wireframes = esboço da visão da página (ele vai guiar o resto do processo do design). O que resulta desse trabalho que o designer desenvolve (Esse trabalho geralmente é desenvolvido por um designer ou alguém que seja formado em comunicação) em cada wireframe é chamado de LAYOUT. 

Então basicamente o pessoal de UX já define as páginas, o conteúdo de cada uma delas e produz alguns Wireframes. Depois a equipe de design adiciona o visual desejado pela cliente como resultado final do projeto. E é onde entramos, onde transformamos esse layout em html.

------------

===>>> boa parte da segurança fica terceirizada, isto é : tirando boas praticas de segurança os servidores que hospedam seu conteudo é que vao garantir a maior parte da sua seguranca. desde hostigator ate AWS.

------------

    FRAMEWORKS:

        REACT x ANGULAR: 

            React usa JS e angular usa TypeScript, no react você consegue programar em TypeScript.
            React não é um framework e sim uma Lib, você cosegue fazer com ele tudo o que você faz com Angular, só que por padrão não vem tudo configurado, você tem que ir configurando. O Angular já vem com tudo embutido. 

------------

    PARA HOSPEDAR O SEU SITE DE GRAÇA, DÁ PRA UTILIZAR O GHPAGES, NETLIFY PARA FRONT E HEROKU PARA BACK. (MARCO BRUNO HOSPEDA OS SEUS SITES NA DIGITAL OCEAN OU NA AZURE)

------------   

    PARA A ORGANIZAÇÃO DOS SEUS PROJETOS, O MARCO BRUNO UTILIZA O ITCSS PARA A ORGANIZAÇÃO DAS PASTAS E O RSCSS PARA A ORGANIZAÇÃO DOS COMPONENTES.

------------

===>>> O DevOps é como se fosse um arquiteto, ele sabe exatamente onde colocar as colunas para o "sistema" ser levantado e escalável.

------------

<html>
        <head>
                são as infos importante só para o nevegador
        </head> 
        
        //(head e boddy são tags irmãs pois tem o mesmo nível hierarquico, sendo filhas da tag html)
        
        <body>
                Todo o conteúdo da página
        </body>

</html>

------------

logo mirror fashon (imagem)=> E-commerce
        => É uma loja focada em roupas femininas para o público de classe média alta. (Também tem roupas para o público masculino, porém o foco é do feminino = importante para o UX)

Título A Mirror Fashion

Paragráfo a Mirror Fashion é a maior empresa ...

Paragráfo nosso centro de distribuição ...

Foto do centro de distribuição / legenda

Paragráfo Compre suas roupas e acessórios...

Subtítulo = História

        => A hierarquia de título, a tipografia (tamanho da fonte, subtítulo, título, etc) é uma herança que vem do jornal, do Impresso.

E PARA PODERMOS NOS COMUNICAR COM O NAVEGADOR E PASSAR TODAS ESSAS INFORMÇÕES PARA O BROWSER, NÓS USAMOS AS "tags". AS TAGS SERVEM PARA DAR SÊMANTICA DENTRO DO HTML (TRANSMITIR A INFO CORRETA PARA O CONTEÚDO CORRETO). SERVE PARA VALORIZAR O CONTEÚDO PARA DAR ACESSIBILIDADE AO CONTEÚDO E SERVE TAMBÉM PARA O SEO* [Search Engine Optimization (otimização para mecanismos de busca)]. (DAR UMA BOA REFERENCIA PARA BUSCA NO GOOGLE - OTIMIZAR O SITE PARA A BUSCA) => pessoas/SEO

Usando as tags:
(dão significado ao texto)

    <nomeDaTag> = Tag de abertura
        Se há uma tag de fechamento é necessario ter um texto. Salvo algumas excessões* E caso você precise sumir com o texto que está entre as tags, você poderá fazer a config no css.
    </nomeDaTag> = Tag de fechamento
    <img/> = Quando não tem tag de fechamento? Quando ela não tem começo meio e fim. 
    com o arquivo em .html, as tags ficam em outra cor, o que chamamos de starlight.

        <h1>A Mirror Fashion</h1>

        <p>a Mirror Fashion é a maior empresa ... </p> .p-paragrafe

        <p> nosso centro de distribuição ... </p>

        Foto do centro de distribuição / legenda

        <p> Compre suas roupas e acessórios... </p>

        <h2> História </h2>


tags que não existiam no html5: 

    <header> cabecalho (logo + menu inicial) [é uma <div> com semântica] {antes do html5 era usado comumente, assim: <div id="header">}

        <section> seção (o conteúdo que tá dentro dela tem relação. e casjo haja outra section embaixo, tem relação com a de cima mesmo que indiretamente.)

            <article> (artigo todo o conteúdo dentro dela é reaproveitável em outro site = algo que faça sentido dentro daquele todo e em otro lugar. Ex: o conteúdo de um post de um blog. Se vocẽ tirar aquele conteúdo dali e colocar em outro lugar, ele fará sentdo)

    <footer> rodapé (mais ou menos igual ao cabeçalho)       
                
                *** Hierarquia de Títulos ***

                <h1> <h2> <h3> <h4> <h5> <h6> .h-heading 1 => foi criado o html para criar teses cientificas dentro da Web. * Não use até o h6 - Varie do h1 até no máximo h3. Você pode acabar atrapalhando a semântica do pág.


===>>> Quando colocamos a tag <!DOCTYPE html> estamos informando ao navegador que o tipo do nosso arquivo é um arquivo do tipo html na sua ultima versão de uso. (E por isso que ela tem que ficar na primiera linha pois é assim que o navegador entenderá de cara qual é a versão que estamos usando.) (indica para o navegador qual versão ele deve usar para rendereizar a página.)

===>>> A ordem do HTML é a seguinte:

        html1 ; html2; html3; html4; xhtml; html5.

===>>> Na tag <html> colocamos o atributo lang (linguagem) que assim, nessa tag global, indicamos em que idioma o site está sendo escrito. (com o valor "pt-BR", pois está em português.)

===>>> head (cabeça) = tudo o que for de conf da página.

===>>> Porém, precisamos dar um nome para a página para que ele fique visível ao usuário, para que ele saiba em qual página está navegando. Colocamos assim a tag <title> (Ficará na aba do documento ou será exibido na barra de título) [tag semantica]

===>>> Alguns navegadores não conseguem entender as acentuções (ã, ç, à, ü, ô, etc). Então, a partir de uma tabela que já existe, nos add as configs dela na nossa página para que o texto fique correto. Colocamos a tag <meta charset="UTF-8"/> .meta-metadados / #charset = char: caracteres e set: definir (característica, parâmetro ou config) (charset ou encoding = conf da codificação de caracteres) / "UTF-8"-valor (definimos qual é a tabela de caracteres) (UTF-8 = Unicode)

    <meta name="viewport" content="width=device-width"> viewport-Entrada de visualização (que no nosso caso, é o monitor) (Foi o metodo que a apple encontrou para consertar a discrepancia entre os pixel do celular para o pixels dos desktops = celular tem muito mais pixels por polegada. Em relação ao pixel virtual e o pixel físico. Que seria o pixel físico e o pixiel de área útil= que é realmente o pixel que seu celular usa quando você tá cessando um site ≠ da resolução que você compra o seu celular) => Quando add essa tag ao html, estamos falando para o browser parar de utilizar a resolução do celular e sim usar a resolução que ele realmente usa para aquele site. (device-width=pixel virtual)


*** TAG> ATRIBUTO> VALOR *** (Não tem tag de fechamento porque não tem conteúdo.)

===>>> colocamos uma tag <link> para usarmos o css fora do html e ficaria assim: <link rel="stylesheet" href="../css/style.css"> rel - relation (relacionado ao que: ao valor "stylesheet" que é o estilo do css) e href - é o local do endereço de onde se encontra o arquivo css que eu estou criando.

===>>> body (corpo) = Tudo o que for conteúdo colocamos dentro dessa tag [tag semantica]

===>>> Tags de ênfase:
        <strong>Deixa o texto em negrito (de forma semantica)</strong>
        <em>Deixa o texto em itálico (de forma semantica) - emphasis accentuated / (ênfase acentuada)</em>
        <small>Deixa o texto menor que o padrão (de forma semantica)</small>

===>>> tag que add imagens: <img src="../img/logo.png"/" alt="Logo da marca Mirror Fashion"/> .img-imagem / #src-source (caminho)/ "entre aspas, o local onde está a imagem, o endereço dela." (../ volta uma pasta) / Para deixar a imagem acessível para deficientes visuais momentâneo, parcial ou total, colocamos o atributo "alt" e nele fazemos uma descrição da imagem. (alt quer dizer contéudo alternativo - alternative) => img por padrão já vem com display:inline-block;

===>>> Colocamos a tag figcaption para colocar a legenda da imagem (muitas pessoas colocam a tag <p> de forma genérica mas para o html5 foi criada essa rag própria para as legendas)

??? E se nós tivessemos mais de uma imagem? Como eu sei que aquela legenda é daquela figura em específico?

envolvemos as tags <img> e <figcaption> na tag <figure> assim eu identifico (semânticamente) que aquela legenda representa sobre aquela exata imagem.

===>>> Listas:

        ordered list: lista ordenada <ol>
                (existe hierarquia de impostancia)
                <li> list item - item da lista
        unordered list: lista não-ordenada <ul>
                (não existe hierarquia de impostancia)
                <li> list item - item da lista
    (a <li> tem por padrão o valor block para a proprieadade display. Se quisermos que a lista fique na horizontal, devemos colocá-lo com o valor inline)


(===>>> Tag div não tem semantica)

===>> tags <div> (divisão) [comportamento padrão = display:block] e <span> (marcação de atributos) [comportamento padrão = display: inline] são como coringas quando não sabemos com o que abrir o "início do algo" que queremos fazer. Não tem nenhum significado especial, podem servir para agrupar conteúdos para que eu possa alterar o seu comportamento nesse grupo (por padrão eles não tem estilo css nenhum.) [diferente das tags header e footer que tem valor semantico.] Então a div é apenas uma "divisão". [tag não tem semantica]

===>>> Lorem cria um conteúdo gigante, caso você precise de um texto de exemplo

===>>> para colocar link, adicionamos a tag <a href=""> a - ancor (âncora = antigamente iamos NAVEGAR na internet e fazia-se isso por meio dos link, então quando parávamos é quando chegavamos no nosso objetivo - "jogando a âncora") e href - referencia (sem o href não funcionará) / podemos ainda dar mais um atributo para o <a> que é o target com o valor "_blank" (isso fará com que outra página seja aberta em uma em branco ou numa nova aba para que seu site não seja "substituido.") 

        <a href="#primeiro">Primeiro</a> <!-- bookmark - referenciar dentro da página (#id) -->
        <a href="#segundo">Segundo</a> <!-- para outra parte do site na mesma página -->
        <a href="#terceiro">Terceiro</a>
        <a href="sobre.html">Sobre</a> <!-- para outra página do site -->
        <a href="https://twitter.com/marcobrunodev" target="_blank">Twitter MB</a> <!-- link externo -->
        

        <h2 id="primeiro">Primeiro</h2>
                <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quos ...</p>

===>>> id = identification (identificação) - não podemos usar nenhum id igual ao outro. Serve para identificar um elemento específico: <h2>. Mas qual h2? então adicionamos o atributo id a tag e assim saberemos que aquele h2 específico terá uma diferença em relação aos outros. <h2 id="primeiro"> (tipo org da página)
(não podemos repetir na página)


===>>> Quando você usa um css escalável, reutilizavel, bonito, etc não será feito com id e sim com class, ele te dará essa versatilidade.

        ===>>> Então quando usar id e quando usar class?? Id sempre será único por página. A classe facilita o reuso de código e flexibilidade. Um elemento pode ter mais de uma classe ao mesmo tempo, por exemplo: 

                <nav class="menu-opcoes menu-cabecalho">
                ...
                </nav>

                no CSS
                ------
                .menu-opcoes {
                        // código
                        // regras serão aplicadas ao nav
                }
                
                .menu-cabecalho{
                        // código
                        // Essas regras também serão aplicadas ao nav
                }

                O que é recomendado é sempre tentar usar o máximo de seletor de class possível e menos de seletor de id ou de tag. No CSS a ordem de prioridade são os seletores que estão abaixo. 

===>>> header (cabeçalho) [tag semantica]

===>>> nav (navegation) = navegação (geralmente é onde fica aquele menu, menu hamburguer, etc) que fica dentro da tag header. [tag semantica] (Podemos ainda ter um menu nav secundário, onde daremos outro menu de navegação para o site, mas vai depender do que o site pede. Mas sim, é uma boa prática de prog ter um menu nav fora do header quando FOR NECESSÁRIO)        

===>>> footer (rodapé) [tag semantica]

===>>> form action="" (form - formulário / action) = extrair infos do clientes, dúvidas, compras etc

===>>> input (colher a informção = insere a info) type (qual o tipo de informação será guardada => text - texto / phone - telefone / email - e-mail / submit - enviar as infos, que funciona como botão* / buttom é somente um botão que não será usado como botão de enviar as infos para um servidor. É um botão que será tratado de uma forma diferente / reset - limpará as infos já digitadas) *temos ainda a tag button para o envio do form. 

===>>> textarea (área de texto - geralmente usado nos forms para o usuário digitar um texto com as suas dúvidas, sugestões, reclamações, etc.)

===>>> button (botão - geralmente usado apra cancelar ou limpar as infos, ou como botão secundário, dentro do form. Quando é usado fora do form, gerelamente é usado JS para algum efeito)


===>>> label - ajuda a acessibilidade do usuário para saber o que identificar (geralemte usado com o form) adicionamos o for no label para identificar o que estamos guardando precisamos de uma identidade única = id. Adicionamos um for no label e um id no input. Dessa forma, falamos para o navegador que x label está associado a x input. (o cursor fica focado) (Não necessariamente precisamos colocar o for. Se envolvermos a tag input no label, o navegador já entende que elas - label e input - estão associadas)Ex: 

    <form>
        <label for="nome">Nome:</label>
        <input id="nome" type="text"> <br>
            
        <label>Telefone:
            <input id="phone" type="phone"> 
        </label><br>
    
        <label for="email">E-mail:</label>
        <input id="email" type="email"> <br>
    
        <label for="msg">Mensagem:</label>
        <input id="msg" type="text"> <br>
    
        Enviar:
        <input type="text">
    </form>

===>>> tag <main> - contéudo principal da página.



                        >>> (A baixo veremos a construção do nosso site) <<<    (HTML)
==========================================================================================================


                INDEX.html
                ----------

                CONTA.html
                ----------

                DESEJOS.html
                ------------

                CARTAO.html
                -----------
                
                SOBRE.html
                ----------

                AJUDA.html
                ----------



==========================================================================================================


                        *** CSS ***
                        -----------

- resetar css [reset css] (o comportamento do css não funciona de forma padronizada para todos os navegadores, por isso, o que fazemos é o que chamamos de reset no css, ou seja, configuramos o css de jeito que ele irá fazer com que nosso site funcione igualmente independente do navegador que nos site será navegado.)

        Podemos usar arquivos prontos que já existe na internet, por exemplo esse abaixo que foi tirado do site https://meyerweb.com/eric/tools/css/reset/

                /* http://meyerweb.com/eric/tools/css/reset/ 
                v2.0 | 20110126
                License: none (public domain)
                */

                html, body, div, span, applet, object, iframe,
                h1, h2, h3, h4, h5, h6, p, blockquote, pre,
                a, abbr, acronym, address, big, cite, code,
                del, dfn, em, img, ins, kbd, q, s, samp,
                small, strike, strong, sub, sup, tt, var,
                b, u, i, center,
                dl, dt, dd, ol, ul, li,
                fieldset, form, label, legend,
                table, caption, tbody, tfoot, thead, tr, th, td,
                article, aside, canvas, details, embed, 
                figure, figcaption, footer, header, hgroup, 
                menu, nav, output, ruby, section, summary,
                time, mark, audio, video {
                        margin: 0;
                        padding: 0;
                        border: 0;
                        font-size: 100%;
                        font: inherit;
                        vertical-align: baseline;
                }
                /* HTML5 display-role reset for older browsers */
                article, aside, details, figcaption, figure, 
                footer, header, hgroup, menu, nav, section {
                        display: block;
                }
                body {
                        line-height: 1;
                }
                ol, ul {
                        list-style: none;
                }
                blockquote, q {
                        quotes: none;
                }
                blockquote:before, blockquote:after,
                q:before, q:after {
                        content: '';
                        content: none;
                }
                table {
                        border-collapse: collapse;
                        border-spacing: 0;
                }

        { Ele funcionará muito bem para site pequenos, porém, para sites maiores, mais complexos ou com mais recursos, podemos usar o "Normalize". }

        === >>> Usar o reset css é basicamente obrigatório.
--------------------
Prefixo: 

    Algumas propriedades nos navegadores não são oficiais. É necessário sempre verificar qual o suporte pelas mesmas para que possamos ter uma melhor experiencia com o usuário final. Porém, mesmo ainda não sendo as definitivas, os navegadores implementam para que os desenvolvedores possa aplicar na prática as funcionalidades e ver o resultado. Um exemplo era o border-radius que ainda não era oficial e por isso tinhamos que colocar o profixo dos navegadores para que não houvesse falha ou para que o browser não deixasse de carregar as configs.

    -webkit- = Chrome e Safari
    -moz- = Firefox
    -ms- = IE
    -o- = opera

        p {
        /* Chrome até versão 3, Safari até versão 4 */
        -webkit-border-radius: 5px;
        /* Firefox até versão 3.6 */
        -moz-border-radius: 5px;
        /* Todas as versões modernas dos navegadores,
        incluindo IE e Opera que nunca precisaram de
        prefixo pra isso */
        border-radius: 5px;
        }

--------------------

                CSS => (seletor > propriedade > valor)
                -------------------------------------- 

        Agora, vamos estilizar a página:

        A tag <style> conseguimos dar propriedades a ela, assim visualmente, podemos modificar a cor de fundo da página, cor da letra, estilo da letra, se o texto ficará centralizado ou não, etc.

        É uma boa prática de programação quando separamos os arquivos, pois para a manutenção por exemplo, separamos os arquivos e assim facará muito mais fácil de saber onde eu devo alterar ou fazer a manutenção x, do que colocar nas tags html. (É como se deixassemos quando um cumprir com o seu papel. Caso colocassemos o css no html é como se "sobrecarregassemos" o html desnecessáriemante.) deixamos cada qual fazer o seu trabalho: html cuidando do conteúdo e o css cuidando da estilização. 

        ===>>> Para colocarmos uma linha abaixo do h2 nós usamos o border-bottom, porque a tag hr é semântica e é utilizada para separar estrofes e aqui queremos fazer algo visual, queremos colocar uma linha no background do h2

--------------------

        -width: largura [Quando você não define uma largura, ele (o elemento) ocupará toda a largura da página (o height ou ultilizará a altura do elemento ou se adaptará conforme o width)***];

                *** Lembrando que: nem toda a tag tem esse mesmo comportamento. isso (ocupar toda a largura da página) acontece para as tags <div>, <p>, etc. Já, por exemplo com a tag <a> (link) isso não acontecerá (irá ocupar só o espaço do link);

                *** Quando a largura vaza, causa um scroll (pode acontecer apra qualquer propriedade quando o valor que atribuimos ultrapassa ao tamanho da página atual.)

--------------------

        -height: altura [quando você não a declara ela se ajustará com o width e caso você não coloque o width se adaptará ao tamanho da sua tela, caso você tenha declarado a tag <meta name="viewport" content="width=device-width, initial-scale=1.0">];

--------------------

        -margin: respiro externo [auto: centralizará o elemento, pois ele atribui o mesmo valor de lado esquerdo para o lado direito (margin-left e margin-right). (Fica melhor de visualizar quando você define um valor para o width. Caso contrário, o margin se adaptará ao tamanho da sua tela.) Contudo, o margin auto funciona com 3 regras: display, width e margin. Assim ele funcionará direitinho (no nosso exemplo, usamos a div. Por padrão a div já é em display: block)]

                > margin: 10px [aplica em todas as direções]; (shorthand property - propriedade taquigráfica)
                > margin-top: 10px [aplica só no topo] (ainda podemos definir especificamente para right, bottom e left.)
                > margin: 10px 11px 12px 13px [estamo fazendo a forma resumida e a ordem é 10px - top, 11px - right, 12px - bottom e 13px - left.]
                > margin: 10px 15px [será a plicado assim: 10px top e bottom / 15px right e left]
                        (então, margin: 0 auto [ficaria 0 para top e bottom / auto para right e left])
                > margin: 10px 12px 14px [10px para top, 12px para right e left, 14px para bottom]

                                         10px
                                      -----------
                                      |         |
                                 12px |         | 12px
                                      |         |
                                      -----------  
                                          14px

                        (Essa lógica acima, quando eu coloco só um valor, ou 2 ou 4 ou 3, se aplica para padding e border também [só temos que lembrar que pra toda regra, temos excessões] mas por padrão, funciona assim.)

--------------------

        -padding: respiro interno [idem margin** (Quase sempre)];

--------------------

        ===>>> Como funciona o "box model"? (modelo de caixa)

                (de dentropra fora)

                Da tag <h2>
                > conteúdo (História)
                > padding (aumenta o tamanho da imagem)
                > **border (aumenta o tamanho da imagem)**
                > margin (aumenta o tamanho da imagem)

                HTML
                <h2>História</h2>

                CSS

                h2{
                        height:200px;
                        width:400px;
                        border: 1px solid white;
                        padding: 50px; (respiro interno)
                        margin: 60px; (respiro externo)
                }

                                          width 400px
                        -------------------------------------------------
                        |                 margin 60px                   |
                        |solid **_______________________________** 1px  |
                        |       |         padding 50px          |       |
                        |       |       -----------------       |       |
                 height |       |       |   conteúdo    |       |       |
                  200px |       |       -----------------       |       |
                        |       |_______________________________|       |
                        |                                               |
                        -------------------------------------------------
                                          

                                tamanho total do item: 1022px x 622px
                                

                        (Somamos: width or height + padding + border + margin)

--------------------

        -box-shadow: sombra da caixa. => X Y blur spread color (blur e spread não são obrigatórios)

                                        (offset-X offset-Y blur-radius spread-radius color) 
                                            offset - eixo/deslocamento
                                            blur - borrão
                                            spread - propagação

            20px - deslocamento x,
            20px - deslocamento y e 
            black - cor da sombra.
            div {
                box-shadow: 20px 20px black;
            }

                        OU


            20px - deslocamento x,
            20px - deslocamento y,
            30px - grau de espalhamento (é aquele "embassadinho") e 
            black - cor da sombra.
            div {
                box-shadow: 20px 20px 30px black;
            }
                        
                        OU

            COM O QUARTO VALOR A SOMBRA AUMENTA OU DIMINUI:            
            div {
                box-shadow: 20px 20px 30px 40px black;
            }

        -box-shadow: inset 0px 0px 40px black; 
            (keyword inset para uma borda interna)

--------------------

* Podemos usar o body para deixar a página padronizada, por exemplo, cor de fundo, estilo de letra, etc...

--------------------

        *** SOBRE CORES:
        ================

        1.Red: Por nome,
        2.#FFFFFF: Por hexadecimal => Baseado em luz,
        3.rgb(48, 47, 47) / rgba(48, 47, 47, 0.1): Por rgb (ou rgba); => 

                2. (RRGGBB) = Red, Green, Blue (Vai de 0 - F).
                3. (rgb - red, green, blue [0 - 255])
                (rgba - red, green, blue, alpha => r, g, b = 0 - 255 e alpha 0 - 1) ALPHA dá uma transparencia a cor.

                [Já para colocar transparencia na imagem, add no css uma propriedade a tag <img>  opacity: 0.5 (exemplo) Que é exatamente igual ao canal alpha do rgba] Exemplo:

                        HTML:
                        <img src="logo.png">

                        CSS:
                        img{
                                opacity: 0.5;
                                boder: 1px solid blue;
                        }

                        A opacidade será aplicada a toda a tag img e na borda também pois ficará na tag toda.
--------------------

        -color: cor da letra;

--------------------

        -opacity: 0.3; varia de 0 a 1 e deixa o elemento com transparencia, onde 0 é totalmente invisível e 1 é totalmente visível. 

            p {
                opacity: 0.3;
            } 

        => Assim, caso houvesse uma imagem de fundo, o elemento todo, inclusive o texto, ficariam com grau de transparencia.

            p {
                background-color: rgba(0,0,0,0.3);
                color: white;
            }

        => Já assim conseguimos configurar exatqamente com o efeito que queremos. Aplicando o RGBA.

            (Em relação as cores, há a possibilidade de colocar um grau de transparencia quando modifiacamos o rgba dos elementos)

--------------------

===>>> Temos que lembrar que tudo tem um padrão, no início. Exemplo: o texto todo sempre começará da esquerda apra a direita e de cima para baixo. Então, tudo, eu disse TUDO, sempre tem um coportamento padrão para que possamos formata-los conforme nossa necessidade.

--------------------

        -background: fundo;

        -background: linear-gradient(#FFCA28,#FF6F00); (mescla uma cor com a outra, podendo acrescentar muito mais de uma),
            EX: background: linear-gradient(#E81123,#F7630C, #FFB900, #4CAF50, #0078D7, #6B69D6, #CE93D8);

        -background: radial-gradient(white, blue); => Do centro pra fora ou vice-versa e tambeḿ pode receber mais de duas cores. 
            background: linear-gradient(to bottom, white, blue) // To top, right, bottom e left não é necessário mas as ultimas versões dos browsers já pode add nas configs adicionando os prefixos.

        -background: linear-gradient(45deg, #5bbeff 0%, #a8deff 47%, #00ffff 100%) => Podendo ainda receber muito mais configs de cores e o angulo que as cores seriam aplicadas. 

            FIQUE ATENTO: O GRADIENTE NAÕ TEM SUPORTE TOTAL PARA TODOS OS NAVEGADORES. VEJA ONDE E COMO DEVERÁ ADICIONAR OS PREFIXOS. (PRINCIPALMENTE NA IE.)

                EX: .linear {
                    background: -webkit-linear-gradient(top, white, blue);
                    background: -moz-linear-gradient(top, white, blue);
                    background: -o-linear-gradient(top, white, blue);
                    }

                EX: .linear {
                    background: -webkit-gradient(linear, left top, left bottom,
                    color-stop(0%, white), color-stop(100%, blue));
                    }

        -background-color: cor do fundo;

        -background-image: url() coloca uma imagem no fundo e seu valor será sua url (seu end.);

                Quando usar img no html e no css??? Temos que verificar primeiramente qual a semantica da imagem. O que queremos dizer com isso: O que a imagem representa pra nós? Ela apresenta contéudo ou é apenas uma reprensentação visual? Um exemplo seria o logo de uma empresa. Esse seria o primeiro elemento que estamos vendo, seria uma assosciação com a marca entre várias outras infomações que podemos colher 
        
        -background-repeat: no-repeat; por padão o navegador repete a imagem e assim configuramos ela para não tenha repetição e sim uma imagem só.

        -background-position: top right; /* x = horizontal, y = vertical */

                
                                           | y (+)
                                           |
                                           |
                                           |
                                           |
                                           |
               (-) ________________________|_____________________ x (+)
                                          0|
                                           |
                                           |
                                           |
                                           |
                                           |
                                           |
                                           | (-)

                (Este é o plano cartesiano que ja conhecemos)

                Porém, o eixo do computador funciona de forma diferente:

                _________________________________________________
                |navegador                                      |
                |_______________________________________________|
                |                                               |
                |  0____________________________________ x (+)  |
                |  | y (-)                                      |
                |  |                                            |        
                |  |                                            |
                |  |                                            |
                |  |                                            |
                |  |                                            |
                |  |                                            | 
                |  | y (+)                                      |
                |_______________________________________________|

                O eixo 0 fica no topo, a esquerda. O x é o eixo horizontal também porém, o eixo y trabalha a vertical de forma diferente:
                        - se colocarmos negativo, o elemento sobe (ficando mais próximo ao topo)
                        - se colocarmos positivo, o elemento desce (ficando mais próximo do rodapé)

                        Ainda podemos utilizar palavras para movimentar nos nossos eixos (top, right, bottom, left e center sendo sempre dois valores: um pra x [horizontal] e outro pra y [vertical])
--------------------

        -border: 1px solid #000000 [tamanho, tipo e cor = em px, boda solid (sólida - contínua) e a cor preta (borda de qualquer elemento); EX: dashed, dotted, double, groove, etc.
        
        - E ainda é possível dizer onde queremos essa linha: se left, right, top or bottom. Caso não seja especificado, quer dizer que a borda será em tudo];

        -border-radius: borda arredondada - radius=raio. Em cada extremidade é ganhado um quadrado imaginário onde o mesmo recebe dentro um císrculo e dentro desse círculo é claculado o raio de cada lado ou cada lado que você aplicar o border-radius pra ficar arredondado; Ex:

            border-radius: 5px; 
                aplicará 5px em todas as bordas do elemento;

            border-radius: 5px 20px;
                aplicará
                    5px para a borda superior esquerda e inferior direita e 
                    20px para a borda superior direita e para a inferior esquerda.

            border-radius: 5px 20px 50px;
                aplicará
                    5px para a borda superior esquerda,
                    20px para a borda superior direita e para a inferior esquerda e 
                    50px para a borda inferior direita.

            borde-radius: 5px 20px 50px 100px;
                aplicará
                    aplicará
                    5px para a borda superior esquerda,
                    20px para a borda superior direita,
                    50px para a borda inferior direita e 
                    100px para a borda inferior esquerda.

        
                    AINDA PODEMOS APLICAR EM APENAS UMA EXTREMIDADE COM AS PROEPRIDADES:

                        > border-top-right-radius: 100px;
                        > border-bottom-right-radius: 150px;
                        > border-top-left-radius: 200px;
                        > border-bottom-left-radius: 250px;

                            E USANDO A PROPRIEDADE transform: rotate(45deg) => iremos girar a div 45 graus [abreviação de deg - graus=degrees] - Um exeplo disso é que poderíamos crair um gráfico de pizza.

--------------------

        -transform: altera propriedades visuais epodemos fazer algumas combinações. EX: 

                html {
                    transform: rotate(-30deg) scale(0.4);
                }

        -transform: translate(Xdeg, Ydeg); => Irá mexer com o eixo do elemento. EX:

                /* Move o elemento no eixo horizontal */
                            
                    .header {
                        transform: translateX(50px);
                    }

                /* Move o elemento no eixo vertical */
                    
                    #main {
                        transform: translateY(-20px);
                    }

                /* Move o elemento nos dois eixos (X, Y) */
                
                    footer {
                        transform: translate(40px, -20px);
                    }

        -transform: scale(1) => Por padrão, o scale já é 1, mas podemos mudar o padrão do valor base. Scale aumenta o item em escalas. Os valores recebidos serão multiplicadores do tamanho. EX: scale(2) deixará o item com o dobro da largura e o dobro da altura. EX:

                /* Alterar a escala total do elemento */

                    #novidades li {.
                        transform: scale(1.2);
                    }

                /* Alterar a escala vertical e horizontal do elemento */

                    #mais-vendidos li {
                        transform: scale(1, 0.6);
                    }

        -transform: rotate(Xdeg) => Irá rotacionar para X angulo que você colocar. (deg-abrev. de degrees que significa "graus") EX:

                    #menu-departamentos {
                        transform: rotate(-10deg);
                    }

                    transform: rotate(45deg) - Irá rotacionar 45° *

                            (*Exemplo de aplicabilidade seria na construção de um gráfico de pizza ou na rotação de um botão.)

        -transform: skewZ(Xdeg) => Distorce o elemento. *Ficará parecido com um losango (dependo de quantos graus você aplicar ao valor). EX:

                /* Distorcer o elemento no eixo horizontal */

                    footer {
                        transform: skewX(10deg);
                    }

                /* Distorcer o elemento no eixo vertical */
            
                    #social {
                        transform: skewY(10deg);
                    }


-------------------- 

        -transition: faz animações de forma "automatica" pra nós. (Ele anima propriedades que mudam) =>

            propriedade > tempo > curva da animação (tipo) *** Veja no Firefox em "inspecionar"

                Quantos quadros queremos que a propriedade crie pra nós??? (frames-molduras, famoso "quadros por segundo => fps" - quantos quadros por segundo estão sendo renderizados. Quanto mais frames ele for renderizado, mais processamento ele exigirá da sua GPU)


        - PROPRIEDADE TRANSITION VERIFICA UMA MUDANÇA!!! E QUANDO HOUVER ESSA MUDANÇA, ELA TENTA ANIMAR ESSA PPROPRIEDADE!!!! // A propriedade transition já criará pra gente os frames // O transition funcionará para qualquer propriedade que possua um começo-meio-fim. EX: não dá pra aplicar o transition de "none" pra "block" - nada irá acontecer // Eu posso colocar valores diferentes para propriedades diferentes // MUITO CUIDADO COM O USO DO "ALL", OU SEJA, QUANDO AO INVÉS DE FALARMOS SOBRE QUAL PROPRIEDADE QUEREMOS A ANIMAÇÃO, FALAMOS QUE QUEREMOS PARA TODAS. ISSO TEM UM CUSTO DE VÁRIAS MANEIRAS: TEMPO, PROCESSADOR, RENDERIZAÇÃO DA PÁGINA PELO BROWSER, ETC... // Quando houver alguma mudança na propriedade transform faça tal coisa (na propriedade e não no valor da propriedade) // 2.5s é a duração de tempo que isso acontecerá (isso, a X coisa) // TEMPO x QUADRO => LINEAR é quando tempo e quadro estão andando em conjunto, proporcionais.

            Por padrão, a animação é linear, mas temos outros tipos para animações mais suaves:
                
                linear - velocidade constante na animação;
                ease - redução gradual na velocidade da animação;
                ease-in - aumento gradual na velocidade da animação;
                ease-in-out - aumento gradual, depois redução gradual na velocidade da animação;
                cubic-bezier(x1,y1,x2,y2) - curva de velocidade para animação customizada (avançado)

        transition: transform 500ms cubic-bezier(0.68, 1.42, 0.8, 1.52), /* Esse valor (cubic-bezier), entre outros, conseguimos pelo inspecionar direto no navegador - só clicar no reloginho no firefox ou na curvinha no chrome */

        => Quando eu quiser que a animação só aconteça quando eu estiver com o mouse em cima, eu devo aplicar o transform apenas no hover, como estará no css.

        => Quando eu quiser que a animação só aconteça quando eu estiver com o mouse em cima, eu devo aplicar o transform apenas no houver, como estará no css - A diferença é clara, quando queremos a animação quando tiramos o mouse, temos que colocar os efeitos no botão e quando queremos quando passamos o mouse por cima apenas, ou quando houver uma "mudança", colocamos no "hover" // Podemos ainda configurar o "tira e põe" do mouse no elemento, por exemplo no hover colocar tempo mais longo do que no btn em si.

-------------------- 

        -cursor: poiter (mesmo quando não é um link, passamos o mouse por cima e o cursor muda de ícone.)

--------------------

        -text-align: center - alinhamento do texto (center - centralizado)* No nosso primiero caso aplicamos a tag <figure>, porém dentro dela temos além de um texto na <figcaption>, uma <img> e neste caso podemos considerar a img como texto também (como contéudo) e com isso, (a proprieadade sendo aplicada na tag pai), tudo o que estiver dentro (as tags filho) serão alteradas; EX: left, right, justify.

        -text-indent: (só afeta o texto, como o seu prefixo mostra) adicionamos o parágrafo daquele que dáriamos com o tab quando estamos escrevendo no word ou no papel, quando a professora nos ensina no primário que um bom espaço para o parágrafo é colocar um dedo no início da folha da esquerda pra direita, marca um pontinho e começa a escrever daquele ponto. A doferença com o text-indent é que esse espaço, o colocamos em px, cm, ou em qualquer unidade de medida que vocẽ esteja usando para desenvolver a sua página; (Tamanho da margem da primeira linha do texto.)

                Ainda:
                        -line-height: 3px; tamanho da altura de cada linha

                        -letter-spacing: 3px; tamanho do espaço entre cada letra

                        -word-spacing: 5px; tamanho do espaço entre cada palavra

        -text-shadow: sombra do texto. => X Y blur color

            10px - deslocamento x (dá pra por os valores negativo também),
            10px - deslocamento y e 
            red - cor da sombra.
            p {
                text-shadow: 10px 10px red;
            }

                        OU


            10px - deslocamento x,
            10px - deslocamento y,
            5px - grau de espalhamento [blur - borrão] (é aquele "embassadinho") e 
            red - cor da sombra.
            p {
                text-shadow: 10px 10px 5px red;
            }
                        
                        OU

            COM DUAS SOMBRAS AO MESMO TEMPO:            
            p {
                text-shadow: 10px 10px 5px red, -5px -5px -4px red;
            }              

--------------------

        -font-family: "Lucida Sans Unicode","LucidaGrande", Arial, sans-serif; (familia da fonte - Aqui, colocamos outras opções caso não haja aquela determinada fonte instalada na máquina do usuário) e por fim colocamos a sans-serif que ficaria como "qualquer fonte sem serifa";

                >serif: c/serifa = Times; (padrão de vários navegadores)
                >sans-serif: s/ serifa = Helvética;
                >monospace: com largura fixa = courier;

        -font-style: italic - estilo da fonte (itálico);

        -font-size: tamanho da fonte;

        -font-variant: small-caps => combinada com o o pseudo-elemento ::first-line, a linha toda ficará com a fonte um pouco menos do que o resto do texto e toda em letra maiúscula. 

--------------------

        -display: é a forma de como o conteúdo vai se comportar.
        
        -display: block (bloco. Utilizará o bloco da página toda** Isso poderá ter algumas diferenças.) [*Veja as explicações*]

        -display: inline (em linha. O conteúdo passa a se comportar como texto*)

        -display: inline-block (Junção dos comportamentos do inline+block)

as propriedades top, right, bottom e left (propriedades de coordenandas) são propriedades que posicionam os elementos na página, contudo, eleas não funcionam sem o position! (essa proprieadade determina qual é o posicionamento do elemento)

--------------------

        -position: static (posição: estática - static é o valor default da position. será a referencia de onde ele foi criado. É o padrão da propriedade)[pode ser usado também quando queremos tirar um comportamento anterior. Ex: Caso eu tenha colocado o position: absolute no mobile e para o desktop euq não quero mais aquele comportamento. seria a mesma coisa que usar o unset.]

        -position: relative (relativo - onde ele foi criado quando ele era static. Então caso queiramos usar o left, right, top e bottom vai usar a referencia de quando ele era static. ex: left: 10px - Iremos empurrar 10px para a direita.)
        [se usarmos valores negativos ele irá mudar para o lado contrário como se tivesse um eixo]
        o valor padrão do left é auto, que assim passamos a resposabilidade para o browser. (não é zero! Zero seria parecido mais não é igual!! NÃO CONFUNDA!!)

        -position: absolute (funciona da seguinte maneira: o elemento x que recebe o position absolute sai do contexto do eixo y e passa para um outro contexto, um contexto novo a frente de tudo e todos. Todos os outros elementos que estão na tela ocupam o espaço daquele elemento x. *CASO TENHA DÚVIDA VALE LEMBRAR DA EXPLICAÇÃO DO MARCO BRUNO COM AS PEÇAS LEGO, ONDE É COMO SE VIRASSEMOS O BROWSER E CONSEGUISSEMOS VER OS ELEMENTOS DE PERFIL*)

            {left, right, bottom e top usam como referencia o navegador, a tela em si.}

            {O position absolute deixa seu contexto vago e cria um novo contexto na mesma camada.} (Não mexe com o eixo z).

            {O position absolute será aplicado independente da hierarquia. Por exemplo, se temos uma div dentro de outra div e precisarmos manipular a div interna, ela não respeitará a div pai, ficará em position absolute sobre o navegador também, ignorando a div pai. Caso queiramos que a div pai seja respeitada, podemos colocar o pai como position relative ou o pai tem que estar com a position diferente de static (pode estar com relative, absolute, fixed, não importa, a filha irá respeitar o pai.)}

        -position: fixed (fixa - literalmente tem as propriedades do absolute, porém quando diminuimos o tamanho da página, o elemento fica fixo na tela quando damos o scroll ficará fixo o elemento.)

            {O fixed respeita o pai somente se estiver SEM as propriedades top e bottom}


--------------------

        -float: left / right (flutuante) [cria um novo contexto, parecido com o absolute mas é diferente. Nunca esconde o conteúdo (img e texto) nem os elementos inline e inline-block]

        -clear: left / right / both (juntamente usado com float para a flutuação de textos e imagens) - limpa o contexto. Ele irá verificar todos os contextos do float (ele é específico do float), e se tiver algum elementoflutuando a esuqerda, a direita ou ambos, ele limpa ess novo contexto e reage como era o padrão, que era o texto ficar embaixo.

        -overflow: hidden [hidden - escondida] (mantem o texto num quadrado ao invés de ir contornando todos os elementos da página. Por padrão, ele é overflow: visible, com o hidden mantem escondida e com o scroll, cria uma barra de rolagem para que você possa conseguir verificar todo o texto - Quando colocamos um width e um height fica mais fácil de entender. O navegador irá verificar se há algo nos contestos, conforme tenha - se não for dado valores de width e heght - ele mesmo irá colocar um tanho do texto e por isso, desse comportamento.)
        {POR QUE ISSO ACONTECE? (Teoria de um dos internautas) Cria um scroll por causa do conteudo e por causa dos blocos que estão flutuando, e o <p> ocupa o lugar de origem. Já que tá flutuando não pode ficar em cima do conteúdo do <p>.} Mas na realidade a questão está referente ao comportamento do browser sobre o algoritmo que ele usa para renderizar a página.

--------------------

        inherit: herda do pai (No navegador p tem por padrão: 

                p {
                    color: inherit
                } 

        para o link é diferente: 
        
                a{
                    color:blue
                        click: purple
                } */
    body {
        color: green;
    }

    a {
        color: inherit; 
    }

    Então modificamos manualmente com o inherit, ou seja, dizemos a tag que herdará o mesmo valor sobre o pai daquela propriedade. Se a tag a estivesse envolvida em uma div, logo esta sendo a sua tag pai, o a respeitaria essa hierarquia de herança.

------------ 

    *** Unidades de Medida:


            = Medidas absolutas: Unidades que não mudam nunca e que sabemos exatamente como funcionam (definidas pela física. Ex: pixel, cm, metro, etc.)

        ABSOLUTAS:
        ----------

            ==>> PX: Unidade de medida de resolução (EX: quantos pixel uma imagem usa para se compor na tela = 1px - menor unidade de medida num dispositivo de resolução)

                1px = 1 pontinho na tela baseado em luz contendo 3 microleds que terá 3 cores (RGB)
                    TELA - PIXEL FÍSICO
                    |-----> Quando usamos essa unid. de medida, o pixel, no css ele é uma medida   
                            virtual => O CSS trabalha com uma aglomeração de pixels. (O CSS não trabalha exatamente com 1 pixel) Cada tela terá um padrão. (Baseado numa matemática em comparação da conversa de mobiles e desktops com o SO - numa resolução) PIXEL VIRTUAL ≠ PIXEL FÍSICO.
        RELATIVO:
        ----------

            ===>> %: Será referente ao seu pai, na maioria dos casos, ou seja: se seu pai tem 500px, 100% dela será 500px (divisão em porcentagem da tela) - Uma parte do pai. (RESPONSIVO)

                - Mas em alguns elementos o valor de referencia será ele mesmo. EX:

                    transform: translateY(100%); positivo - move o elemento pra baixo = 100% dele mesmo. 

                        (Nesse caso, vai ser no chutometro ou na decoreba sabermos qual é a referencia do tamanho.)

------------

    *** Seletor de tag:

            começa com a tag, e a propriedade será aplicada a todas as tags que houverem dela mesma no html. EX:

                p {
                    color: #FFF
                }

    *** Seletor de classe:

            As propriedades serão aplicadas a todas tags que tiverem essa determinada classe. (Representado pelo .) EX:

                HTML

                    <div class="menu departamentos calças-femininas">

                CSS

                    .menu, .departamentos {
                        width: 495px;
                        height: 480px;
                    }

                    .menu h2 {
                        text-transform: uppercase;
                    }

                    .departamentos {
                        background-color: #FF0;
                        text-align: justify;
                    }

                    .calcas-femininas {
                        
                    }

    *** Seletor de ID:

            Haverá apenas um ID na página, ams o principio será parecido ao da classe: aplicar a determinada propriedade apenas aquele ID. (Representado pela #) EX:

                HTML:

                    <footer id="rodape-final">

                CSS:

                    #rodape-final {
                        width: 800px;
                        height: 150px;
                        background-image: url(img/logos/mirror-fashion.png)
                    }

    *** Seletor de atributos:

            Conseguimos atribuir propriedades para atributos das tags de forma ainda que conseguimos fazer com que o css pesquise no html as tags que existem, ou pelo começo, ou pelo final, etc... Serve para qualquer atributo: src, alt, href... (representado pelos []) Veja os EXs:

                HTML:

                    <ul class="social-media">

                        <li class="items">
                            <a href="http://twitter.com/marcobrunodev" class="link" target="_blank">Twitter</a>
                        </li>
                    
                        <li class="items">
                            <a href="http://instagram.com/marcobrunodev" class="link" target="_blank">Instagram</a>
                        </li>

                        <li class="items">
                            <a href="http://linkedin.com/in/marcobrunobr" class="link" target="_blank">Linkedin</a>
                        </li>

                        <li class="items">
                            <a href="https://gmail.com" class="link">Login</a>
                        </li>

                        <li class="items">
                            <a href="https://linkedin.com.uk" class="link"><br>Visite nosso site em inglês também</a>
                        </li>

                    </ul>


                CSS:

                    [href="http://instagram.com/marcobrunodev"] {
                        background-image: url(img/instagram.png);
                        margin-top: -8px;
                    } 
                    
                    => Neste caso como só temos depois do href o simbolo de igual, significa que o browser só procurará o href exatamente igual. 

                --------------------------------------------------

                    [href*="twitter"] {
                        background-image: url(img/twitter.png);
                    } 
                    
                    => O browser irá procurar se a palavra "twitter" contém no link.
                    (Com o asterísco, o browser irá procurar todas as srcs que contenham a palavra logo no link ou no caminho ou enfim, sob o atributo que estamos procurando.)
                
                --------------------------------------------------

                    [href^="https"] {
                        background-image: url(img/cadeado.png);
                    } 
                    
                    => Para a verificação no começo do site (se ele começa com https) =>
                    Muito utilizado em sites do governo quando há um campo para login acrescentamos o cadeado.

                --------------------------------------------------

                    [href$=".uk"] {
                        text-indent: 0px;
                        padding-left: 110px;
                        background-image: url(img/reino-unido.png);
                    } 
                    
                    => Geralmente utilizado para a verificação de linguagens para cada país =>
                    faz a verificação ao final do site. Como no ex acima, com o final .uk significa que o site é britanico, ou seja, ele estará em ingles. 

                --------------------------------------------------

                    li[value~="marco"] {
                        color: #CC0000;
                    }

                    => Também é possível buscar por uma palavra específica no valor, não importando o valor completo do atributo. 

                --------------------------------------------------

                    Podemos criar atributos customizados. EX:
                    [data-coiso="coisado"] { config } <= todo atributo criado tem que começar com o "data-" e o nome do atributo (coiso) com o valor (coisado) 
                    ou
                    [data-coiso*="coisado"] <= data-coiso QUE CONTÉM OU CONTENHA coisado

                    Todo atributo criado tem que começar com data-



    *** Seletor avançados:
        -----------------------


    *** Pseudo-classe = Classes já pré-definidas pelo CSS. (É como se o navegador já colocasse classes por padrão para certos elementos utilizadas em situações comuns.)


        +   =   Seletor irmão => Irá selecionar o irmão seguinte ou o ultimo da combinação. (o mais significa "o irmão seguinte") EX: 

                HTML
                ----
                
                    <body>

                        <h1>Title</h1>

                        <p>Lorem</p>

                        <p>Lorem</p>

                    </body>

                
                CSS
                ---

                    h1 + p {
                        font-size: 20px;
                    }   
                        OU

                    p + p {
                        color: #FF0000;
                    }   
                        OU

                    h1 + p + p {
                        font-style: italic;
                    }



        >   =   Seletor filho direto => Irá selecionar o somente o filho direto (SOMENTE) EX: 

                HTML
                ----
                
                    <body>

                        <article>

                            <h1>Title</h1>

                            <p>Lorem</p>

                            <p>Lorem</p>

                            <section>

                                <h2>Subtitle</h2>

                                <p>Lorem</p>

                            </section>

                        </article>
                    </body>

                
                CSS
                ---

                    article > p {
                        color: #FF0000;
                    }


        ~   =   Seletor siblins (irmãos) => Iremos selecionar todos os que são irmãos diretos, como no exemplo abaixo, todos os Ps que são inrmãos do h2 EX: 

                HTML
                ----
                
                    <body>

                        <article>

                            <h1>Title</h1>

                            <p>Lorem</p>

                            <p>Lorem</p>

                            <section>

                                <h2>Subtitle</h2>

                                <p>Lorem</p>

                                <p>Lorem</p>
                                
                                <p>Lorem</p>

                            </section>

                        </article>
                    </body>

                
                CSS
                ---

                    h2 ~ p {
                        color: #FF0000;
                    }


        :not    =   Seletor de negação => Sempre será aconpanhado de um identificador (ID ou class). 
            "Aquilo que estiver com tal classe, não receberá a config e todas as demais receberão EX: 

                HTML
                ----
                
                    <body>

                        <article>

                            <h1>Title</h1>

                            <p>Lorem</p>

                            <p>Lorem</p>

                            <section>

                                <h2>Subtitle</h2>

                                <p>Lorem</p>

                                <p class="especial">Lorem</p>
                                
                                <p>Lorem</p>

                            </section>

                        </article>
                    </body>

                
                CSS
                ---

                    h2 ~ p:not(.especial) {
                        color: #FF0000;
                    }

                        OU SEJA: Os irmãos diretos do h2 receberão a cor da fonte vermelha, exceto o 2º P pois o mesmo está com a classe .especial


        :hover  =   Quando eu passar o mouse por cima, acontece tal coisa. (Pseudo-classe) EX:

                HTML
                ----

                    <form>
                        <label for="nome">Nome:</label>
                        <input id="nome" type="text">
                    </form>

                CSS
                ---

                    input:hover {
                        font-size: 20px;
                    }


        :focus  =   pseudo-classe - Quando o foco ou quando eu clicar, acontece tal coisa. EX:

                HTML
                ----

                    <form>
                        <label for="nome">Nome:</label>
                        <input id="nome" type="text">
                    </form>

                CSS
                ---

                    input:focus {
                        background-color: rgba(0, 0, 0, .5);
                    }


                    AINDA TEMOS:
                    ------------

                        /* seleciona todas as âncoras que têm o atributo "href", ou seja, links */
                        a:link {
                            background-color:#FF0000;
                        }

                        /* seleciona todos os links cujo valor de "href" é um endereço já visitado */
                        a:visited {
                            background-color:#00FF00;
                        }

                        /* seleciona o link no exato momento em que clicamos nele */
                        a:active {
                        background-color:#0000FF;
                        }


        :first-child    =   pseudo-classe - Muito aplicado em listas, usamos quando queremos modificar o primeiro item dela EX:

                HTML
                ----

                    <div>  

                        <ul>
                            <li>Primeiro Item</li>
                            <li>Segundo Item</li>
                            <li>Terceiro Item</li>
                            <li>Quarto Item</li>
                        </ul>

                    </div>

                CSS
                ---

                    li:first-child {
                        color: #ffff00;
                    }


        :last-child     =   pseudo-classe - Muito aplicado em listas, usamos quando queremos modificar o último item dela EX:

                HTML
                ----

                    <div>  

                        <ul>
                            <li>Primeiro Item</li>
                            <li>Segundo Item</li>
                            <li>Terceiro Item</li>
                            <li>Quarto Item</li>
                        </ul>

                    </div>

                CSS
                ---

                    li:last-child {
                        font-style: italic;
                    }

        :nth-child()    =   [N - number / TH - "...fourTH, fiveTH, sixTH, sevenTH..."] = enésino número que tenha relação de irmão, ENTRE IRMÃOS. Como se fosse um array no qual você consegue selecionar um item especifico de uma lista (tipo o índice) E ainda conseguimos dar como parametros opeações aritmeticas, ou seja, podemos fazer lista coloridas de itens par e impar, podemos colocar uma lista para multiplos de 3 e por ai vai. EX:        
                
                HTML
                ----

                <header>
                    <nav>
                        <ul class="menu">
                            <li class="item">Primeiro Item</li>
                            <li>Segundo Item</li>
                            <li>Terceiro Item</li>
                            <li class="item">Quarto Item</li>
                        </ul>
                    </nav>
                </header>

                <div>
                    <ul class="segundo-menu">
                        <li>Um</li>
                        <li>Dois</li>
                        <li>Três</li>
                        <li>Quatro</li>
                        <li>Cinco</li>
                    </ul>
                </div>

                <div>
                    <ul class="terceiro-menu">
                        <li>Par</li>
                        <li>Ímpar</li>
                        <li>Par</li>
                        <li>Ímpar</li>
                        <li>Par</li>
                        <li>Ímpar</li>
                        <li>Par</li>
                        <li>Ímpar</li>
                        <li>Par</li>
                        <li>Ímpar</li>
                        <li>Par</li>
                        <li>Ímpar</li>
                    </ul>
                </div>


                CSS
                ---

                    /* Terceiro elemento da lista de LIs */
                    .segundo-menu > li:nth-child(3){
                        background-color: orange;
                    }

                    /* Elementos pares */
                    .terceiro-menu > li:nth-child(2n) {
                        background-color: orangered;
                    }

                      OU

                    .terceiro-menu > li:nth-child(even) {
                        background-color: rgb(3, 3, 39);
                       
                        color: #ffffff;
                    } 

                    /* Elementos ímpares :nth-child(an+b) */

                    .terceiro-menu > li:nth-child(2n+1) {
                        background-color: rgb(3, 3, 39);
                        color: #ffffff;
                    }

                      OU

                    .terceiro-menu > li:nth-child(odd) {
                        background-color: rgb(3, 3, 39);
                        color: #ffffff;
                    } 
                    
                        (odd - ímpar) ou (even - par)
                        ----------------------------

    *** Pseudo-elementos = São elementos que não existem no documento mas podem ser selecionados pelo CSS. É como se houvesse um elemento lá!  

            ::first-letter  =   Um exemplo da sua aplicabilidade, seria caso quisessemos colocar a primeira letra dos parágrafos em maiúsculas como em revistas. Seria um problema se tivessemos que colocar uma classe pra cada um. EX:

                HTML
                ----

                    <p>
                        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Minima perferendis voluptatibus voluptatum facere saepe error recusandae quaerat autem neque adipisci.
                    </p>

                    <p>
                        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Minima perferendis voluptatibus voluptatum facere saepe error recusandae quaerat autem neque adipisci.
                    </p>

                    <p>
                        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Minima perferendis voluptatibus voluptatum facere saepe error recusandae quaerat autem neque adipisci.
                    </p>

                CSS
                ---

                    p::first-letter {
                        font-size: 200%;
                    }

            
            ::first-line    =   Pega a linha toda. EX:

                HTML
                ----
                    
                    <p>
                        Lorem ipsum dolor sit, amet consectetur adipisicing elit. Minima perferendis voluptatibus voluptatum facere saepe error recusandae quaerat autem neque adipisci.
                    </p>

                CSS
                ---

                    p::first-line {
                        font-variant: small-caps;
                    }

            
            NOVOS ELEMENTOS: Imagine que queremos colocar [] antes e depois de cada item de uma lista de links.

                Ao invés de colocarmos isso no html, inserimos o mesmo pelo css, assim:

                    HTML
                    ----
                    
                    <body>

                        <a href="...">Link1</a>

                        <a href="...">Link2</a>

                        <a href="...">Link3</a>

                    </body>

                    CSS
                    ---

                        a::before {
                            content: '[ ';
                        }

                        a::after {
                            content: ' ]';
                        }

                    






==========================================================================================================
                        >>> (A baixo veremos a construção do nosso site) <<<    (CSS)
==========================================================================================================

                        RESET.css
                        ---------

        /* http://meyerweb.com/eric/tools/css/reset/ 
        v2.0 | 20110126
        License: none (public domain)
        */

        html, body, div, span, applet, object, iframe,
        h1, h2, h3, h4, h5, h6, p, blockquote, pre,
        a, abbr, acronym, address, big, cite, code,
        del, dfn, em, img, ins, kbd, q, s, samp,
        small, strike, strong, sub, sup, tt, var,
        b, u, i, center,
        dl, dt, dd, ol, ul, li,
        fieldset, form, label, legend,
        table, caption, tbody, tfoot, thead, tr, th, td,
        article, aside, canvas, details, embed, 
        figure, figcaption, footer, header, hgroup, 
        menu, nav, output, ruby, section, summary,
        time, mark, audio, video {
            margin: 0;
            padding: 0;
            border: 0;
            font-size: 100%;
            font: inherit;
            vertical-align: baseline;
        }
        /* HTML5 display-role reset for older browsers */
        article, aside, details, figcaption, figure, 
        footer, header, hgroup, menu, nav, section {
            display: block;
        }
        body {
            line-height: 1;
        }
        ol, ul {
            list-style: none;
        }
        blockquote, q {
            quotes: none;
        }
        blockquote:before, blockquote:after,
        q:before, q:after {
            content: '';
            content: none;
        }
        table {
            border-collapse: collapse;
            border-spacing: 0;
        }

        ====>>> basicamente o reset.css, serve para desconfigurar as configs padrões que já vem nos browsers. Em seguida eu aplico as minhas configs (de como eu quero que fique o layout da minha página), assim todas as esperiencias em browsers diferentes ficaram com o mesmo resultado. 


                        INDEX.html
                        ----------

                        CONTA.html
                        ----------

                        DESEJOS.html
                        ------------

                        CARTAO.html
                        -----------
                        
                        SOBRE.html
                        ----------

                        AJUDA.html
                        ----------




==========================================================================================================
                        >>>>>>>> EXPLICAÇÕES <<<<<<<<
==========================================================================================================
        
        Na explicação de border-radius:
        --------------------------------------------------------------------

        HTML:
        -----

            <!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação de Border-Radius</title>
    <link rel="stylesheet" href="index.css">
</head>

<body>
    
    <div class="container">
        <h1>Border-Radius</h1>
        <div class="quadrado primeiro">Primeiro</div>
        <div class="quadrado segundo">Segundo</div>
        <div class="quadrado terceiro">Terceiro</div>
        <div class="quadrado quarto">Quarto</div>
        <div class="quadrado quinto">Quinto</div>
        <div class="quadrado sexto">Sexto</div>
        <div class="quadrado setimo">Sétimo</div>
        <div class="quadrado oitavo">Oitavo</div>
    </div>

</body>

</html>




        CSS:
        ----

            .container {
    width: 560px;
    height: 600px;
    margin: auto;
    background-color: rgb(233, 233, 233);
}

h1 {
    font-size: xx-large;
    font-style: italic;
    text-decoration: underline;
    text-align: center;
    padding-top: 10px;
}

.quadrado {
    display: inline-block;
    width: 150px;
    height: 150px;
    margin: 3px 0 0 10px;
    padding: 10px;
    font-size: x-large;
    font-weight: bolder;
    text-align: center;
}

.primeiro {
    background-color: #ff0000;
    border-radius: 50%; /* circulo porque usamos a porcentagem = 50px não dá tão certo */
}

.segundo {
    background-color: #ffb000;
    border-radius: 10px 30px;
}

.terceiro {
    background-color: #00ff00;
    border-radius: 10px 30px 70px;
}

.quarto {
    background-color: #0000ff;
    border-radius: 10px 20px 40px 80px;
}

.quinto {
    background-color: #000000;
    color: #ffffff;
    border-radius: 0px 5px 20px;
}

.sexto {
    background-color: #efcfcf;
    border-bottom-right-radius: 150px;
}

.setimo {
    background-color: #EF6950;
    border-bottom-right-radius: 150px;
    transform: rotate(45deg); /* degrees - graus, tipo 90°, 360° */
    position: relative;
    left: 368px;
}

.oitavo {
    background-color: #00b294;
    width: 200px;
    height: 100px;
    position: relative;
    top: 10px;
    left: -100px;
    border-top-right-radius: 100px;
    border-bottom-left-radius: 100px;
}

==========================================================================================================

        Na explicação de box_text-shadow:
        --------------------------------------------------------------------
        
        HTML:
        -----

            <!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação de Text-Shadow e box Shadow</title>
    <link rel="stylesheet" href="index.css">
</head>

<body>
    <div class="container">
        <h1>Text-Shadow</h1><br>
        <div class="texto primeiro">Meu</div>
        <div class="texto segundo">Amor</div>
        <div class="texto terceiro">Wellington</div>
        <div class="texto quarto">Da vida toda!!!</div>
        <br><br><br><br><br>
        <h1>Box-Shadow</h1><br>
        <div class="quadrado first">Primeiro</div>
        <div class="quadrado second">Segundo</div>
        <div class="quadrado third">Terceiro</div>
        <div class="quadrado fourth">Quarto</div>
        <div class="quadrado fifth">Quinto</div>
        <h1>Outros Exemplos</h1><br>
        <div class="retangulo primeiro-first">One</div>
        <div class="retangulo segundo-second">Two</div>
    </div>
</body>

</html>


        CSS:
        ----

        .container {
    width: 1200px;
    height: 900px;
    margin: 10px;
    padding: 5px;
}

h1 {
    text-decoration: underline;
    font-style: italic;
}

.texto {
    display: inline;
    padding: 30px;
    font-weight: bolder;
}

.primeiro {
    font-size: 70px;
    text-shadow: 10px 10px red;
}

.segundo {
    font-size: 50px;
    text-shadow: 5px 5px 10px red;
}

.terceiro {
    font-size: 35px;
    text-shadow: 10px 10px 5px rgba(0, 0, 0, 0.6), -5px -5px 4px rgba(255, 0, 0, 0.8);
}

.quarto {
    font-size: 35px;
    text-shadow: -5px -5px 10px red;
}

.quadrado {
    display: block;
    float: left;
    width: 100px;
    height: 100px;
    margin: 50px;
    padding: 10px;
    border: 1px solid rgba(0, 0, 0, 0.9);
    font-size: x-large;
    font-weight: bolder;
    text-align: center;
}

.first {
    box-shadow: 10px 30px red;
}

.second {
    box-shadow: 8px 8px 12px red;
}

.third {
    box-shadow: -4px 10px 40px 40px red;
}

.fourth {
    box-shadow: inset 0 0 25px red;
}

.fifth {
    box-shadow: -5px -5px 10px red;
}

.retangulo {
    display: inline;
    float: left;
    margin: 50px;
    padding: 10px;
    width: 200px;
    height: 60px;
    font-size: x-large;
    font-weight: bolder;
    text-align: center;
    border-top-right-radius: 60px;
    border-bottom-left-radius: 60px;
    cursor: pointer;
}

.primeiro-first {
    background-color: #26A69A;
    box-shadow: 3px 3px #004D40;
}

.primeiro-first:hover {
    box-shadow: inset 3px 3px 10px rgba(0, 0, 0, 0.6);
}

.segundo-second {
    background: linear-gradient(#FFCA28,#FF6F00, #DA3B01);
    box-shadow: 3px 3px 6px 8px #F7630C;    
}

.segundo-second:active {
    box-shadow: inset 3px 3px 10px  rgba(0, 0, 0, 0.6);
}

        
==========================================================================================================

        Na explicação de display:
        --------------------------------------------------------------------

        >>> Block:
            ------

    O display block tem as seguintes caracateristicas:

        - USA A LINHA TODA;
        - A ALTURA É DEFINIDA PELO CONTEÚDO;
        - PODEMOS CONFIG WIDTH;
        - PODEMOS CONFIG HEIGHT;
        - NÃO DÁ PRA COLOCAR UM ELEMENTO DO LADO*; (até dá, mas dá um trabalhinho)

    Algumas tags já tem por padrão o display block, por exemplo a div que estamos usando como exemplo.

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Display: Block</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div class="quadrado primeiro">Primeiro</div>
    <div class="quadrado segundo">Segundo</div>
    <div class="quadrado terceiro">Terceiro</div>
</body>
</html>


.quadrado {
    display: block; /* a div já tem por padrão o display block */
    width: 200px;
    height: 200px;
    text-align: center;
    font-size: xx-large;
    font-weight: bold;
}

.primeiro {
    background-color: #ff0000;
}

.segundo {
    background-color: #00ff00;
}

.terceiro {
    background-color: #0000ff;
}





        >>> Inline:
            -------

    O display Inline tem as seguintes caracateristicas:

        - LARGURA E ALTURA SÃO DEFINIDAS PELO CONTEÚDO;
        - OS ELEMENTOS FICAM UM DO LADO DO OUTRO;
        - NÃO CONSEGUIMOS CONFIG WIDTH; 
        - NÃO CONSEGUIMOS CONFIG HEIGHT;
        (Caso coloquemos width e height o próprio VSCode já nos apresenta o erro, pois no display inline, não conseguimos configurar a propriedade.)
        - COMPORTAMENTO DE PALAVRAS; (Tendo o comportamento de palavras, o espaço e o enter funcionam nessa propriedade da mesma forma - deixam um espaço entre as divs - e caso queiramos deixar as divs sem espaços - literalmente um do lado do outro, bem coladinho -  podemos comentar os espaços ou enters no html que funcionará.)

        - Temos outro exemplo: um aluno deu outro exemplo com o word-spacing na tag pai (class .paragrafo) com -5px e depois na class .quadrado voltando o word-spacing pra normal. [DESCOMENTAMOS NO HTML]

        (Tanto o padding quanto o margin, para o display:inline tem um comportamento diferente: se houver um elemento com display:inline um embaixo do outro, o margin se sobreporá {se os elementos tiverem margens de valor igual (ex: 10px) a distancia entre elas não se tornará 20px, eles se sobreporão = o browser faz o que: tira 5px de um e 5 px de outro mantendo ainda os 10px iniciais})



    > EXEMPLO 1 (MARCO BRUNO):
    --------------------------


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Display: Inline</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div>
        <div class="quadrado primeiro">Primeiro</div><!--
     --><div class="quadrado segundo">Segundo</div><!--
     --><div class="quadrado terceiro">Terceiro</div>
    </div>

    <p>
        Primeiro
        Segundo
        Terceiro
    </p>
</body>
</html>



.quadrado {
    display: inline; /* tem o comportamento de palavra */
    text-align: center;
    font-size: xx-large;
    font-weight: bold;
    padding: 5px;
}

.primeiro {
    background-color: #ff0000;
}

.segundo {
    background-color: #00ff00;
}

.terceiro {
    background-color: #0000ff;
}


    > EXEMPLO 2 (ALUNO):
    --------------------------


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Display: Inline</title>
    <link rel="stylesheet" href="index2.css">
</head>
<body>
    <!-- Um aluno na live deu outro exemplo com o word-spacing na tag pai (class .paragrafo) com -5px configurando no css. -->
    
    <div class="paragrafo">
        <div class="quadrado primeiro">Primeiro quadrado que eu fiz</div>
        <div class="quadrado segundo">Segundo</div>
        <div class="quadrado terceiro">Terceiro</div>
    </div>

    <p>
        Primeiro
        Segundo
        Terceiro
    </p>
</body>
</html>




/* um aluno deu outro exemplo com o word-spacing na tag pai (class .paragrafo) com -5px */

.paragrafo {
    word-spacing: -5px;
}

.quadrado {
    display: inline; /* tem o comportamento de palavra */
    text-align: center;
    font-size: xx-large;
    font-weight: bold;
    padding: 5px;
    word-spacing: normal;
}

.primeiro {
    background-color: #ff0000;
}

.segundo {
    background-color: #00ff00;
}

.terceiro {
    background-color: #0000ff;
}




        >>> Inline-Block:
            -------------


    O display Inline tem as seguintes caracateristicas:

        - OS ELEMENTOS FICAM UM DO LADO DO OUTRO (ficam na mesma linha);
        - CONSEGUIMOS CONFIG WIDTH; 
        - CONSEGUIMOS CONFIG HEIGHT;
        - COMPORTAMENTO DE PALAVRA (Fica com os espaços. Caso eu queira retirar os espaços, eu posso comentar os espaços e enters como também posso apenas remover os enters que também dará certo. o jeito mais usado é comentar os espaços como está no nosso código.)

            => Junção do Block+Inline
            -------------------------

        (Se dessemos só float: left para cada um deles já os deixariam inline - um do lado do outro [para divs] porém caso quisessemos colocar outros tipos de efeitos o float não permitiria por conta da config inicial que o mesmo possui.)


Exemplo 1:
----------

    <!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Explicação display: inline-block</title>
        <link rel="stylesheet" href="index.css">
    </head>

    <body>
            <div class="quadrado primeiro">Primeiro</div><!--
         --><div class="quadrado segundo">Segundo</div><!--  
         --><div class="quadrado terceiro">Terceiro</div>
    </body>

</html>


<!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Explicação display: inline-block (Como era feito antes)</title>
        <link rel="stylesheet" href="index.css">
    </head>

    <body>
        <!-- Como era feito antes do surgimento do display: flex e sua família -->
        <div class="pai"> <!-- Criavamos uma div pai e assim manipulavamos por ela -->
            <div class="quadrado primeiro">Primeiro</div>
            <div class="quadrado segundo">Segundo</div>
            <div class="quadrado terceiro">Terceiro</div>
            <div class="quadrado primeiro">Primeiro</div>
            <div class="quadrado segundo">Segundo</div>
            <div class="quadrado terceiro">Terceiro</div>
            <div class="quadrado primeiro">Primeiro</div>
            <div class="quadrado segundo">Segundo</div>
            <div class="quadrado terceiro">Terceiro</div>
            <div class="ultima">Ultima</div>
        </div>

        <p> <!-- div .pai tem o comportamento do p (texto) -->
            Primeiro
            Segundo
            Terceiro
            Primeiro
            Segundo
            Terceiro
            Primeiro
            Segundo
            Terceiro
        </p>

        <p class="exemplo">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci debitis amet doloribus dolore, autem illo dolorum dolores error animi aperiam repudiandae beatae nesciunt voluptates? Harum sit dolorum animi tenetur nobis, voluptate quis beatae possimus odio eveniet, sunt et quas labore tempore repudiandae unde. Dolorum, porro a dolor ex neque eos quam atque nemo itaque laboriosam quis id eaque saepe repellendus nobis exercitationem. Nobis quibusdam et impedit placeat doloribus, quidem ut nemo dolorem harum velit illum accusamus sit provident, voluptas, eius rem. Deleniti assumenda maiores reprehenderit exercitationem repellat cumque, numquam laboriosam voluptas rerum doloribus, quidem, aliquid harum modi quibusdam quia dicta!
        </p>
    </body>

</html>




.pai {
    text-align: justify; /* Comportamento de texto, por isso align-items e align-contents não funcionam */
}

.quadrado {
    width: 200px;
    height: 200px;
    font-size: x-large;
    font-weight: bolder;
    text-align: center;
    margin-bottom: 5px;
    padding-top: 5px;
    display: inline-block;
}

.primeiro {
    background-color: #FFB900;
}

.segundo {
    background-color: #0063B1;
}

.terceiro {
    background-color: #00CC6A
}

.ultima { /* para fazermos a ultima linha ser sempre a ultima referente ao Justify, configuramos da seguinte maneira:  */
    display: inline-block;
    width: 100%; /* A porcentagem usa como referencia o tamanho do pai. Se o pai tem width 500px, 100% dela será de 500px */
    background-color: #ffff00;
    text-align: center;
    /* visibility: hidden; */ /* 1ª opção */
    /* opacity: 0; */ /* 2ª opção */
    height: 0; /* 3ª opção, mas o texto continua aparecendo */
    overflow: hidden; /* Para retirar o texto */
}

p {
    color: #ff0000;
    font-size: x-large;
    font-weight: bolder;
    text-align: right;
}

.exemplo {
    color: #000;
    text-align: justify;
}



Exemplo 2:
----------

    <!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Explicação display: inline-block (Como era feito antes)</title>
        <link rel="stylesheet" href="index2.css">
    </head>

    <body>
        <!-- Como faríamos atualemente? Utilizando o flex! => veja no css -->
        <div class="pai"> 
            <div class="quadrado primeiro">Primeiro</div>
            <div class="quadrado segundo">Segundo</div>
            <div class="quadrado terceiro">Terceiro</div>
        </div>

        <p> <!-- div .pai tem o comportamento do p (texto) -->
            Primeiro
            Segundo
            Terceiro
        </p>

        <p class="exemplo">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci debitis amet doloribus dolore, autem illo dolorum dolores error animi aperiam repudiandae beatae nesciunt voluptates? Harum sit dolorum animi tenetur nobis, voluptate quis beatae possimus odio eveniet, sunt et quas labore tempore repudiandae unde. Dolorum, porro a dolor ex neque eos quam atque nemo itaque laboriosam quis id eaque saepe repellendus nobis exercitationem. Nobis quibusdam et impedit placeat doloribus, quidem ut nemo dolorem harum velit illum accusamus sit provident, voluptas, eius rem. Deleniti assumenda maiores reprehenderit exercitationem repellat cumque, numquam laboriosam voluptas rerum doloribus, quidem, aliquid harum modi quibusdam quia dicta!
        </p>
    </body>

</html>


.pai {
    display: flex;
    width: 100%;
    justify-content: space-between;
}

.quadrado {
    width: 200px;
    height: 200px;
    font-size: x-large;
    font-weight: bolder;
    text-align: center;
    margin-bottom: 5px;
    padding-top: 5px;
}

.primeiro {
    background-color: #FFB900;
}

.segundo {
    background-color: #0063B1;
}

.terceiro {
    background-color: #00CC6A
}

p {
    color: #ff0000;
    font-size: x-large;
    font-weight: bolder;
    text-align: right;
}

.exemplo {
    color: #000;
    text-align: justify;
}



Exemplo 3:
----------

    <!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Explicação display: inline-block (Como era feito antes)</title>
        <link rel="stylesheet" href="index3.css">
    </head>

    <body>
        <!-- E se os elementos tivessem tamanhos diferentes e quisessemos alinha-los de jeitos diferentes? Como configurariamos? -->
        <div class="pai"> 
            <div class="quadrado primeiro">Primeiro</div>
            <div class="quadrado segundo">Segundo</div>
            <div class="quadrado terceiro">Terceiro</div>
            <div class="ultima">Ultima</div>
        </div>

        <p> <!-- div .pai tem o comportamento do p (texto) -->
            Primeiro
            Segundo
            Terceiro
            Primeiro
            Segundo
            Terceiro
            Primeiro
            Segundo
            Terceiro
        </p>

        <p class="exemplo">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci debitis amet doloribus dolore, autem illo dolorum dolores error animi aperiam repudiandae beatae nesciunt voluptates? Harum sit dolorum animi tenetur nobis, voluptate quis beatae possimus odio eveniet, sunt et quas labore tempore repudiandae unde. Dolorum, porro a dolor ex neque eos quam atque nemo itaque laboriosam quis id eaque saepe repellendus nobis exercitationem. Nobis quibusdam et impedit placeat doloribus, quidem ut nemo dolorem harum velit illum accusamus sit provident, voluptas, eius rem. Deleniti assumenda maiores reprehenderit exercitationem repellat cumque, numquam laboriosam voluptas rerum doloribus, quidem, aliquid harum modi quibusdam quia dicta!
        </p>
    </body>

</html>




    .pai {
    text-align: justify; /* Por padrão, essa propriedade alinha sob o valor do topo. */
}

.quadrado {
    width: 200px;
    font-size: x-large;
    font-weight: bolder;
    text-align: center;
    margin-bottom: 5px;
    padding-top: 5px;
    display: inline-block;
    vertical-align: middle; /* Funciona bem apenas para propriedades inline, as outras como float, por exemplo não funcionaria ou não funcionaria bem (funciona de boa para display: inline e inline-block ou ainda com dsplay:table ou cell que seria para comportamento de tabelas, pois o vertical-align foi criado para a manipulação de tabelas e para elementos que eram inline.) */
}

.primeiro {
    background-color: #FFB900;
    height: 200px;
}

.segundo {
    background-color: #0063B1;
    height: 400px;
}

.terceiro {
    background-color: #00CC6A;
    height: 150px;
}

.ultima {
    display: inline-block;
    width: 100%; 
    background-color: #ffff00;
    text-align: center;
    height: 0; /* O height:0 + o overflow:hidden é para que o utlimo item não apareça */
    overflow: hidden;
}

p {
    color: #ff0000;
    font-size: x-large;
    font-weight: bolder;
    text-align: right;
}

.exemplo {
    color: #000;
    text-align: justify;
}



        
        >>> Flex:
            -----


    O display Flex tem as seguintes caracateristicas:

        - O elemento que ganha o display:flex também fica com o comportamento de bloco (block, parecido com o display:block. Porém conseguimos colocar "coisas" au lado. )

==========================================================================================================


        Na explicação de float:
        ----------------------------------------------------------------------


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação de Float</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div class="quadrado primeiro">Primeiro</div>
    <div class="quadrado segundo">Segundo</div>
    <!-- <div class="quadrado terceiro">Terceiro</div> -->
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque sint iure sapiente sequi officiis eius dolorum ipsa quo soluta expedita iste provident fugit accusantium autem illum, laborum non. Dolore maiores laudantium dicta quae, possimus reprehenderit libero consectetur cum voluptates eaque voluptatibus, ipsa reiciendis incidunt amet necessitatibus omnis veniam placeat accusantium nulla ex? Distinctio corrupti modi necessitatibus, obcaecati aliquam repellat qui accusantium eius...
    </p>
    <!-- <p> é display: block, o conteúdo dentro do texto é display: inline -->
</body>
</html>



body {
    background-color: rgba(128, 128, 128, 0.212);
}

.quadrado {
    width: 200px;
    height: 200px;
    font-size: x-large;
    font-weight: bolder;
    margin: 5px;
    padding: 10px;
    text-align: center;
    opacity: .5;
}

.primeiro {
    background-color: #ff0000;
    /* float: left; */
    margin-left: 12px;
}

.segundo {
    background-color: #0000ff;
    color: #ff0000;
    float: left;
    width: 100px;
    height: 100px;
}

.terceiro {
    background-color: #ffff00;
    color: #ff0000;
    float: left;
    width: 150px;
    height: 150px;
    margin-right: 12px;
}

p {
    font-size: 20px;
    text-align: justify;
    margin: 0 8px;
    clear: right;
    overflow: hidden;
}


==========================================================================================================


        Na explicação de Formulários:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação sobre Formulários</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <h1>Contato: </h1>

    <form>
        <label for="nome">Nome:</label>
        <input id="nome" type="text"> <br>
            
        <label>Telefone:
            <input type="phone">
        </label> <br>
    
        <label for="email">E-mail:</label>
        <input id="email" type="email"> <br>
    
        <label for="msg">Mensagem:</label>
        <textarea id="msg"> </textarea> <br>
    
        <input id="send" type="submit" value="Enviar"> <!-- é um input porque o usuário vai clicar no botão de enviar para salvar as infos preenchidas no form-->
        <button id="cancel" type="reset">Cancelar</button>
    </form>

</body>
</html>



h1 {
    text-shadow: 1px 1px 3px rgba(00, 00, 00, 0.5);
}

form {
    margin: 10px;
    padding: 10px;
    border: solid 1px #000000;
    box-shadow: 2px 2px 4px rgba(00, 00, 00, 0.5);
    width: 400px;
}

input, textarea {
    margin: 4px 0px;
}

#send {
    position: relative;
    right: -250px;
}

#cancel {
    position: relative;
    right: -260px;
}


==========================================================================================================


        Na explicação de Inherit-Texto:
        ----------------------------------------------------------------------


<!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Text e inherit</title>
        <link rel="stylesheet" href="index.css">
    </head>

    <body>
        <div>
            <a href="#">Laura Carlotta</a>
        </div>
        
        <p>
            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Distinctio, ab amet veritatis aspernatur at nam sint, illum voluptas consequatur porro vitae, numquam et! Exercitationem, quaerat. Animi adipisci consequatur mollitia fugiat.
        </p>
        
    </body>

</html>



body {
    color: #0000ff;
}

div {
    background-color: gray;
    color: #ffffff;
    width: 200px;
    height: 50px;
    text-align: center;
    margin: auto;
    margin-top: 10px;
    padding-top: 15px;
    vertical-align: middle;
    
}

/* inherit: herda do pai */

/* No navegador

    p {
        color: inherit
    } 

    para o link é diferente: 
    a{
        color:blue
            click: purple
    } */

a {
    color: inherit; /* Então modificamos manualmente */
    
}

        
==========================================================================================================

        Na explicação de link:
        --------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Link</title>
</head>
<body>
    <a href="#primeiro">Primeiro</a>
    <a href="#segundo">Segundo</a>
    <a href="#terceiro">Terceiro</a>
    <a href="sobre.html">Sobre</a>
    <a href="https://twitter.com/marcobrunodev" target="_blank">Twitter MB</a>
    

        <h2 id="primeiro">Primeiro</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore... </p>
        <h2 id="segundo">Segundo</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore... </p>
        <h2 id="terceiro">Terceiro</h2>
                <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolore... </p>



==========================================================================================================


        Na explicação de margin-auto:
        ---------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação Margin-Auto</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div>
        First => Aprendendo o Margin-Auto
    </div>

    <p>
        Aprendendo o text-indent </br></br>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Rem ad dolor nostrum pariatur quos error veniam quibusdam illo, iusto repellendus, temporibus nisi sunt ullam, id maxime corrupti doloribus sed laboriosam!
    </p>
</body>
</html>

-----------

body{
    color: #fff;
    background-color: #000;
}

div{
    font-size: 30px;
    background-color: rgb(138, 22, 22);
    display: block;
    width: 500px;
    margin: auto; /* ou margin: 0 auto; */
    text-align: center;
}

p{
    font-size: 20px;
    text-indent: 20px;
}



==========================================================================================================


        Na explicação de Position:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação do Position</title>
    <link rel="stylesheet" href="index.css">
</head>
<body>
    <div class="quadrado primeiro">Primeiro</div>
    <div class="quadrado segundo">Segundo</div>
    <div class="quadrado terceiro">Terceiro</div>
    <div class="quadrado quarto"> Quarto
        <div class="quadrado interna">Interna</div>
    </div>
    <div class="quadrado quinto">Quinto</div>
</body>
</html>



.quadrado {
    width: 200px;
    height: 200px;
    text-align: center;
    font-size: x-large;
    font-weight: bolder;
}

.primeiro {
    background-color: #ff0000;
    position: static; /* fica estático, não faz nada. "O Fred na copa de 2014" kkkkk */
    left: 10px; /* não acontece nada!
    /*  left: 10px; eixo x
        x right: 10px;
        bottom: 20px; eixo y
        x top: 40px;
        */
}

.segundo {
    background-color: #0000ff;
    position: absolute; /* Referente a tela */
    top: 50px;
    left: 170px;
}

.terceiro {
    
    background-color: #00ff00;
    position: relative;
    left: 10px; /* vai empurrar para a direita 
    bottom: 15px;
    /* position relative usa a posição de onde o elemento foi criado (se usarmos valores negativos ele irá mudar para o lado contrário como se tivesse um eixo) */
}

.quarto {
    background-color: #ff00ff;
    position: absolute;
    font-size: 10px;
    padding: 10px;
    
}

.interna {
    background-color: #000000;
    color: #ffffff; 
    width: 150px;
    height: 150px;
    position: absolute;
    top: 35px;
    left: 35px;
}

.quinto {
    background-color: #ffff00;
    position: fixed; /* literalmente com as mesmas propriedades do absolute, porém quando damos o scroll, o elemento ficará fixo na tela ou mesmo só se diminuirmos a tela. */
    top: 0;
    right: 50px;
}


ex- apostila:
-------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=
    , initial-scale=1.0">
    <title>Ex-apostila: position</title>
    <link rel="stylesheet" href="ex-apostila.css">
</head>
<body>
    <div class="quadrado primeiro">Quadrado 1</div>
    <div class="quadrado segundo">Quadrado 2</div>
    <div class="quadrado terceiro">Quadrado 3 
        <div class="quadrado interno">Quadrado interno</div>
    </div>
    <div class="quadrado quarto">Quadrado 4</div>
</body>
</html>



.quadrado {
    height: 200px;
    width: 200px;
    font-size: 18px;
    font-weight: bolder;
    text-align: center;
    padding: 10px;
}

.primeiro {
    background-color: #ff0000;
    position: static;
}

.segundo {
    background-color: #00ff00;
    position: relative;
    left: 100px;
    top: 20px;
}

.terceiro {
    background-color: #0000ff;
    position: absolute;
    left: 400px;
    top: 50px;
}

.interno {
    background-color: #000000;
    color: #fff;
    width: 100px;
    height: 100px;
    position: absolute;
    top: 50px;
    left: 50px;
}

.quarto {
    background-color: #ffff00;
    position: fixed;
    top: 20px;
    right: 50px;
}





==========================================================================================================


        Na explicação de SELETOR ID FILHO:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação seletor de ID e filho</title>
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <header>
        <h1>Contato</h1>
        <a href="index.html">Home</a>
        <p>Entre em contato conosco:</p>
    </header>

    <h2 id="email">Email:</h2>

    <h2 id="skype">Skype:</h2>

    <h3>Exemplo do e no css</h3>
        <p>
            O "e" será reprentado pela virgula (Veja no css nas tags h2 e h3 e p)
        </p>

    <footer>
        <a href="https://twitter.com/marcobrunodev" target="_blank"><strong>Twitter</strong> Marco Bruno</a> | 
        <a href="https://twitch.com/marcobrunodev" target="_blank"><strong>Twitch</strong> Marco Bruno</a>
        <p>exemplo do seletor filho + ,</p>
    </footer>
</body>
</html>

-------------

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Home</title>
</head>

<body>
    <header>
        <h1>Home</h1>
        <a href="contato.html">Contato</a>
    </header>
</body>
</html>

--------------------

/* Seletor de tag*/

h1{
    background-color: red;
    color: white;
    width: 500px;
    margin: auto;
    text-align: center;
}

/* seletor de tag com e = , */

h2, h3{
    font-size: 20px;
    margin-left: 400px;
}

/* Seletor de ID # */

#email{
    color: green;
}

#skype{
    color: blue;
}

/* Seletor filho = com "espaço" */

footer a, footer p{
    color: #fff;
    text-decoration: none;
}

/* Tanto podemos ser mais especificos assim: "footer a strong" como com "footer strong" somente! tudo vai depender em que resultado você precisa chegar*/

footer a strong{
    color: #f00;
}

footer{
    background-color: #000;
    color: #fff;
    width: 550px;
    margin: auto;
    text-align: center;
    padding: 10px 0;
}

==========================================================================================================


        Seletores de tag, com "e"(,) e seltores filho (ID FILHO):
        ----------------------------------------------------------------------

        (Explicação de ID e seletores)

Seletor de tag, como já diz o nome é para a tag. Veja que dessa forma aplicará para todas as tags iguais que houverem no texto.

        h1{
        background-color: red;
        color: white;
        width: 500px;
        margin: auto;
        text-align: center;
        }

Seletor de tag com e = , (Dessa forma você aplicará os mesmos parâmetros para duas ou mais tags diferentes as separando por vígula e espaço).

        h2, h3{
        font-size: 20px;
        margin-left: 400px;
        }

Seletor de ID # (Damos uma identificação específica para um determinado elemento com #ID, ou seja apenas 1 elemento terá aquela config pois podemos colocar apenas um id por página.)

        #email{
        color: green;
        }

        #skype{
        color: blue;
        }

Seletor filho = com "espaço" (Temos a opção também de aplicar um seletor para uma tag filha, assim especificamos propriedades para aquele grupo de tags. Ou seja, caso no nosso footer tenha mais de uma tag <a> e queremos aplicar aquela config a todas as tags a do nosso footer, usamos a tag filha para passar os parâmetros. Isso funciona bem para não precisarmos ficar declarando um ID para cada coisa.)

        footer a, footer p{
        color: #fff;
        text-decoration: none;
        }

Tanto podemos ser mais especificos assim: "footer a strong" como com "footer strong" somente! tudo vai depender em que resultado você precisa chegar (A hierarquia não importa por exemplo se for uma tag "neta", basta que aquele strong esteja dentro de footer [mesmo que antes esteja dentro da tag<a>])

        footer a strong{
        color: #f00;
        }

        footer{
        background-color: #000;
        color: #fff;
        width: 550px;
        margin: auto;
        text-align: center;
        padding: 10px 0;
        }



==========================================================================================================

        Na explicação de seletores-avançados:
        ----------------------------------------------------------------------

Explicação 1:
============= 

    HTML:
    -----

        <!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Seletores Avançados</title>
        <link rel="stylesheet" href="index.css">
    </head>

    <body>

        <h1>Title</h1>

        <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Magni adipisci perspiciatis eos totam similique ad molestias est cumque optio sed doloribus ab debitis quas iste nobis maiores natus porro repellat officiis incidunt sequi, dicta consectetur quia rem. Voluptates ea earum maiores sit? Quis saepe cupiditate odit quos quisquam? Quam, similique.</p>
        
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam ipsum commodi accusamus magni doloremque! Blanditiis voluptates ex, enim nisi illo esse reprehenderit soluta neque asperiores totam eaque delectus placeat voluptas natus eligendi est hic debitis veniam corporis consequatur! Illum amet praesentium molestias voluptate possimus dolorem saepe quod eveniet hic facere?</p>

        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam ipsum commodi accusamus magni doloremque! Blanditiis voluptates ex, enim nisi illo esse reprehenderit soluta neque asperiores totam eaque delectus placeat voluptas natus eligendi est hic debitis veniam corporis consequatur! Illum amet praesentium molestias voluptate possimus dolorem saepe quod eveniet hic facere?</p>

        <h1>Title</h1>

        <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Magni adipisci perspiciatis eos totam similique ad molestias est cumque optio sed doloribus ab debitis quas iste nobis maiores natus porro repellat officiis incidunt sequi, dicta consectetur quia rem. Voluptates ea earum maiores sit? Quis saepe cupiditate odit quos quisquam? Quam, similique.</p>
        
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam ipsum commodi accusamus magni doloremque! Blanditiis voluptates ex, enim nisi illo esse reprehenderit soluta neque asperiores totam eaque delectus placeat voluptas natus eligendi est hic debitis veniam corporis consequatur! Illum amet praesentium molestias voluptate possimus dolorem saepe quod eveniet hic facere?</p>

        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam ipsum commodi accusamus magni doloremque! Blanditiis voluptates ex, enim nisi illo esse reprehenderit soluta neque asperiores totam eaque delectus placeat voluptas natus eligendi est hic debitis veniam corporis consequatur! Illum amet praesentium molestias voluptate possimus dolorem saepe quod eveniet hic facere?</p>

        <h1>Title</h1>

        <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Magni adipisci perspiciatis eos totam similique ad molestias est cumque optio sed doloribus ab debitis quas iste nobis maiores natus porro repellat officiis incidunt sequi, dicta consectetur quia rem. Voluptates ea earum maiores sit? Quis saepe cupiditate odit quos quisquam? Quam, similique.</p>
        
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam ipsum commodi accusamus magni doloremque! Blanditiis voluptates ex, enim nisi illo esse reprehenderit soluta neque asperiores totam eaque delectus placeat voluptas natus eligendi est hic debitis veniam corporis consequatur! Illum amet praesentium molestias voluptate possimus dolorem saepe quod eveniet hic facere?</p>

        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam ipsum commodi accusamus magni doloremque! Blanditiis voluptates ex, enim nisi illo esse reprehenderit soluta neque asperiores totam eaque delectus placeat voluptas natus eligendi est hic debitis veniam corporis consequatur! Illum amet praesentium molestias voluptate possimus dolorem saepe quod eveniet hic facere?</p>

    </body>

</html>



    CSS:
    ----

        h1 + p {
    font-size: 20px;
}

p + p {
    color: #ff0000;
}

p + h1 {
    text-indent: 50px;
}

h1 + p + p {
    color: #0000ff;
}

------------------------

    Explicação 2:
    ============= 

    HTML:
    -----

        <!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>2º EX. de seletores avançados</title>
        <link rel="stylesheet" href="index2.css">
    </head>

    <body>

        <div class="container">

            <h1>Ficha cadastral:</h1>

            <form>

                <label for="nome">Nome: </label>
                <input id="nome" type="text"> <br>

                <label for="data">Data de Nascimento: </label>
                <input id="data" type="date"> <br>

                <label for="end">Endereço: </label>
                <input id="end" type="text"> <br>

                <label for="sexo">Sexo: </label>
                <input id="sexo" value="sexof" type="radio"> F 
                <input id="sexo" value="sexom" type="radio"> M <br>

                <label for="nome-da-mae">Nome da mãe: </label>
                <input id="nome-da-mae" type="text"> <br>

                <label for="escolaridade">Escolaridade: </label>
                <select id="escolaridade" name="menu" size="1">
                    <option>Básico Completo</option>
                    <option>Básico Incompleto</option>
                    <option>Fundamental Completo</option>
                    <option>Fundamental Incompleto</option>
                    <option>Médio Completo</option>
                    <option>Médio Incompleto</option>
                    <option>Superior Completo</option>
                    <option>Superior Incompleto</option>
                    <option>Analfabeto</option>
                </select> <br>

            </form>

        </div>

    </body>
</html>





    CSS:
    ----

        .container {
    width: 600px;
    margin: auto;
}

h1 {
    text-align: center;
}

h1:hover {
    text-shadow: 1px 1px 3px rgba(0, 0, 0, .5);
}

form {
    font-size: x-large;
}

label:hover + input{
    border: 1px dotted #000000;
}

input {
    margin-bottom: 5px;
    border-radius: 10px;
}
input:focus {
    background-color: rgba(0, 0, 0, .1);
}



------------------------

    Explicação 3:
    ============= 

    HTML:
    -----

        <!DOCTYPE html>
<html lang="pt-Br">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>3º EX. de seletores avançados</title>
        <link rel="stylesheet" href="index3.css">
    </head>

    <body>

        <article>

            <h1>Title</h1>

            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Consectetur ut magnam totam quibusdam eius, nostrum tempora rerum unde itaque eos incidunt impedit a doloremque dolorum quaerat mollitia est earum saepe.</p>

            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem exercitationem temporibus vitae corporis magni vel veniam quisquam necessitatibus ad tempore perferendis delectus expedita, ducimus omnis molestiae sit dolor earum suscipit.</p>

            <section>

                <h2>Subtitle</h2>
    
                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Perspiciatis molestiae quia vero architecto harum omnis nemo beatae suscipit corrupti voluptatem, eveniet magni culpa totam magnam porro in. Earum, aliquid odio.</p>

            </section>

        </article>

        <p><a href="https://pt.wikipedia.org/wiki/Latim" target="_blank" class="ancora">Lorem</a>, ipsum dolor sit amet consectetur adipisicing elit. Assumenda earum accusantium recusandae, quos enim unde. Quidem, ratione fuga eum animi esse ipsa optio nemo temporibus officiis vero ipsum aperiam omnis!</p>

        <h3>Sub-Subtitulo</h3>

        <p>Lorem ipsum dolor sit amet, <a href="https://pt.wikipedia.org/wiki/Latim" target="_blank" class="ancora">consectetur</a> adipisicing elit. Mollitia sint similique totam provident nulla, at aliquid perspiciatis delectus aspernatur vel? Tempore voluptatum corrupti corporis ipsam odit eos, cum mollitia facilis.</p>

        <p class="especial">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia sint similique totam provident nulla, at aliquid <a href="../../index.html">perspiciatis</a> delectus aspernatur vel? Tempore voluptatum corrupti corporis ipsam odit eos, cum mollitia facilis.</p>

        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia sint similique totam provident nulla, at aliquid perspiciatis delectus aspernatur vel? Tempore voluptatum corrupti corporis ipsam odit eos, cum mollitia <a href="https://pt.wikipedia.org/wiki/Latim" target="_blank">facilis</a>.</p>



        <header>
            <nav>
                <ul class="menu">
                    <li class="item">Primeiro Item</li>
                    <li>Segundo Item</li>
                    <li>Terceiro Item</li>
                    <li class="item">Quarto Item</li>
                </ul>
            </nav>
        </header>

        <div>
            <ul class="segundo-menu">
                <li>Um</li>
                <li>Dois</li>
                <li>Três</li>
                <li>Quatro</li>
                <li>Cinco</li>
            </ul>
        </div>

        <div>
            <ul class="terceiro-menu">
                <li>Par</li>
                <li>Ímpar</li>
                <li>Par</li>
                <li>Ímpar</li>
                <li>Par</li>
                <li>Ímpar</li>
                <li>Par</li>
                <li>Ímpar</li>
                <li>Par</li>
                <li>Ímpar</li>
                <li>Par</li>
                <li>Ímpar</li>
            </ul>
        </div>

    </body>

</html>



    CSS:
    ----

        body {
    width: 500px;
    margin: auto;
}

article > p {
    font-style: italic;
}

h2 ~ p {
    color: #ff0000;
}


h3 ~ p:not(.especial){
    color: #aaafff;
    font-style: italic;
}

/* seleciona todas as âncoras que têm o atributo "href", ou seja, links */
a:link {
    background-color:#FF0000;
}

/* seleciona todos os links cujo valor de "href" é um endereço já visitado */
a:visited {
    background-color:#00FF00;
}

/* seleciona o link no exato momento em que clicamos nele */
a:active {
background-color:#0000FF;
}

.menu > li:first-child {
    color: #ffff00;
}

.menu > li:last-child {
    color: #00ff00;
}

.menu > li:not(.item) {
    text-indent: 20px;
}

.segundo-menu > li:nth-child(3){
    background-color: orange;
}

/* Elementos pares */
.terceiro-menu > li:nth-child(2n) {
    background-color: orangered;
}

/* Elementos ímpares */

.terceiro-menu > li:nth-child(2n+1) {
    background-color: rgb(3, 3, 39);
    color: #ffffff;
}

p::first-letter {
    font-size: 200%;
}

p::first-line {
    font-variant: small-caps;
}

------------------------

    Explicação 4: (:nth-child())
    ============= 

    HTML:
    -----

<!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>4ª EX - seletores avançados</title>
        <link rel="stylesheet" href="index4.css">
    </head>

    <body>

        <div>
            <div>
                <h1>Ordinal Numbers</h1>
            </div>
            <ul>
                <li>First</li>
                <li>Second</li>
                <li>Third</li>
                <li>Fourth</li>
                <li>Fifth</li>
            </ul>
        </div>

    </body>

</html>


    CSS
    ---

    div {
    display: block;
    width: 500px;
    font-size: x-large;
    margin: auto;
}

div > h1 {
   text-align: center;
}

ul{
    position: relative;
    left: -20px;
}

li {
    list-style: none;
}

/* ímpar */
li:nth-child(odd) {
    background-color: #ff0000;
    padding: 0px 20px;
}

/* par */
li:nth-child(even) {
    background-color: #ffff00;
    padding: 0px 10px;
    text-align: right;
}



==========================================================================================================

        Na explicação de seletores, class, id e tag:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=, initial-scale=1.0">
    <title>Explicação seletores- class, id e tag</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="destaque base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="destaque">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="destaque">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
    <p class="base">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sunt, adipisci.</p>
</body>
</html>


----------


.base {
    font-size: 40px;
    color: #ff0000;
}

.destaque {
    color: #00ff00;
}



==========================================================================================================


        Na explicação de Seletores de Atributos:
        ----------------------------------------------------------------------

<!DOCTYPE html>
<html lang="pt-BR">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Seletores de atributo</title>
        <link rel="stylesheet" href="index.css">
    </head>

    <body>
        <ul class="social-media">

            <li class="items">
                <a href="http://twitter.com/marcobrunodev" class="link" target="_blank">Twitter</a>
            </li>
        
            <li class="items">
                <a href="http://instagram.com/marcobrunodev" class="link" target="_blank">Instagram</a>
            </li>

            <li class="items">
                <a href="http://linkedin.com/in/marcobrunobr" class="link" target="_blank">Linkedin</a>
            </li>

            <li class="items">
                <a href="https://gmail.com" class="link">Login</a>
            </li>

            <li class="items">
                <a href="https://linkedin.com.uk" class="link"><br>Visite nosso site em inglês também</a>
            </li>

        </ul>
    </body>
</html>



.social-media {
    list-style: none;
}

.items {
    font-size: xx-large;
    margin-bottom: 10px;
}

.link {
    display: block;
    height: 100px;
    background-size: 100px 100px;
    background-repeat: no-repeat;
    text-indent: -9999px;
}

/* Serve para qualquer atributo (src, alt, href...) */

[href="http://instagram.com/marcobrunodev"] {
    background-image: url(img/instagram.png);
    margin-top: -8px;
} /* Neste caso como só temos depois do href o simbolo de igual, significa que o browser só procurará o href exatamente igual. */

[href="http://linkedin.com/in/marcobrunobr"] {
    background-image: url(img/linkedin.png);
}

[href*="twitter"] {
    background-image: url(img/twitter.png);
} /* "Contém" a palavra no link */

/* Outros ex */

[href^="https"] {
    background-image: url(img/cadeado.png);
} /* Para a verificação no começo do site (se ele começa com https) =>
Muito utilizado em sites do governo quando há um campo para login acrescentamos o cadeado */

[href$=".uk"] {
    text-indent: 0px;
    padding-left: 110px;
    background-image: url(img/reino-unido.png);
} /* Geralmente utilizado para a verificação de linguagens para cada país =>
faz a verificação ao final do site. Como no ex acima, com o final .uk significa que o site 
é britanico, ou seja, ele estará em ingles. */

[src*="logo"] {
    background-image: url(logo.png);
} /* Com o asterísco, o browser irá procurar todas as srcs que contenham a palavra logo no link ou no caminho ou enfim, sob o atributo que estamos procurando. */

/* Podemos criar atributos customizados. EX:
[data-coiso="coisado"] { config } <= todo atributo criado tem que começar com o "data-" e o nome do atributo (coiso) com o valor (coisado) 
ou
[data-coiso*="coisado"] <= data-coiso QUE CONTÉM OU CONTENHA coisado

Todo atributo criado tem que começar com data-*/


==========================================================================================================


        Na explicação de transform-transition:
        ---------------------------------------------------------------------
    
    EXPLICAÇÃO 1:

    HTML:
    -----

        <!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação de transform e transition</title>
    <link rel="stylesheet" href="index.css">
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@500&display=swap" rel="stylesheet">
</head>

<body>

    <button class="btn entrar">Entrar</button>
    <button class="btn editar">Editar</button>
    <button class="btn cancelar">Cancelar</button>

</body>

</html>




    CSS:
    ----

    body {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

.btn {
    padding: 10px 20px;
    margin: 15px;
    font-size: 20px;
    font-family: 'Comfortaa', cursive;
    border: none;
    border-radius: 4px;
    transform: scale(1); 
    transition: transform 500ms linear, 
                border-radius 500ms linear,
                background-color 300ms linear,
                color 300ms linear; 
}    

.btn:hover {
    border-radius: 20px;
    transform: scale(1.4); 
}

.entrar {
    background-color: #ffb900;
    color: #F7630C;
}

.entrar:hover {
    background-color: #f7630c;
    color: #ffb900;
}

.editar {
    background-color: #00cc6a;
    color: #498205;
}

.editar:hover {
    background-color:#498205;
    color:  #00cc6a;
}

.cancelar {
    background-color: #8e8cd8;
    color: #744DA9;
}

.cancelar:hover {
    background-color: #744DA9;
    color: #8e8cd8;
}



>>>>>>>>>>>>>>>>>

    EXPLICAÇÃO 2:

    HTML:
    -----

        <!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explicação de transform e transition</title>
    <link rel="stylesheet" href="index2.css">
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@500&display=swap" rel="stylesheet">
</head>

<body>

    <button class="btn entrar">Entrar</button>
    <button class="btn editar">Editar</button>
    <button class="btn cancelar">Cancelar</button>

</body>

</html>





    CSS:
    ----

        body {
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

.btn {
    padding: 10px 20px;
    margin: 15px;
    font-size: 20px;
    font-family: 'Comfortaa', cursive;
    border: none;
    border-radius: 4px;
    transform: scale(1);
    transition: transform 1s linear, 
                border-radius 100ms linear,
                background-color 100ms linear,
                color 100ms linear;
}

.btn:hover {
    border-radius: 20px;
    transform: scale(1.4);
    transition: transform 500ms cubic-bezier(0.68, 1.42, 0.8, 1.52),
                border-radius 500ms linear,
                background-color 500ms linear,
                color 500ms linear;
}

.entrar {
    background-color: #ffb900;
    color: #F7630C;
}

.entrar:hover {
    background-color: #f7630c;
    color: #ffb900;
}

.editar {
    background-color: #00cc6a;
    color: #498205;
}

.editar:hover {
    background-color:#498205;
    color:  #00cc6a;
}

.cancelar {
    background-color: #8e8cd8;
    color: #744DA9;
}

.cancelar:hover {
    background-color: #744DA9;
    color: #8e8cd8;
}




==========================================================================================================

README.md

        # HTML

        - Tem a responsabilidade de guardar:
        - Conteúdo(textos e imagens);
        - Forma semântica (tags)
        - Estrutura (figure)
        (*ajudam na semântica mas não tem interferencia visual)

                = CONTEÚDO.

        # CSS

        - Tem responsabilidade de: 
        (Liguagem de estilo)
        - Visual

                = ESTILO.

        # JavaScript

        - Tem responsabilidade de:
        (Interatividade)
        - Interação, animação

                = INTERAÇÃO.
